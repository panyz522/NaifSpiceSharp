!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
appndc_c	SpiceZpr.h	/^   void              appndc_c ( ConstSpiceChar     * item,$/;"	signature:( ConstSpiceChar * item, SpiceCell * cell )
appndd_c	SpiceZpr.h	/^   void              appndd_c ( SpiceDouble          item,$/;"	signature:( SpiceDouble item, SpiceCell * cell )
appndi_c	SpiceZpr.h	/^   void              appndi_c ( SpiceInt             item,$/;"	signature:( SpiceInt item, SpiceCell * cell )
axisar_c	SpiceZpr.h	/^   void              axisar_c ( ConstSpiceDouble     axis   [3],$/;"	signature:( ConstSpiceDouble axis [3], SpiceDouble angle, SpiceDouble r [3][3] )
b1900_c	SpiceZpr.h	/^   SpiceDouble       b1900_c  ( void );$/;"	signature:( void )
b1950_c	SpiceZpr.h	/^   SpiceDouble       b1950_c  ( void );$/;"	signature:( void )
badkpv_c	SpiceZpr.h	/^   SpiceBoolean      badkpv_c ( ConstSpiceChar      *caller,$/;"	signature:( ConstSpiceChar *caller, ConstSpiceChar *name, ConstSpiceChar *comp, SpiceInt size, SpiceInt divby, SpiceChar type )
bltfrm_c	SpiceZpr.h	/^   void              bltfrm_c ( SpiceInt             frmcls,$/;"	signature:( SpiceInt frmcls, SpiceCell * idset )
bodc2n_c	SpiceZpr.h	/^   void              bodc2n_c ( SpiceInt             code,$/;"	signature:( SpiceInt code, SpiceInt namelen, SpiceChar * name, SpiceBoolean * found )
bodc2s_c	SpiceZpr.h	/^   void              bodc2s_c ( SpiceInt             code,$/;"	signature:( SpiceInt code, SpiceInt lenout, SpiceChar * name )
boddef_c	SpiceZpr.h	/^   void              boddef_c ( ConstSpiceChar     * name,$/;"	signature:( ConstSpiceChar * name, SpiceInt code )
bodfnd_c	SpiceZpr.h	/^   SpiceBoolean      bodfnd_c ( SpiceInt             body,$/;"	signature:( SpiceInt body, ConstSpiceChar * item )
bodn2c_c	SpiceZpr.h	/^   void              bodn2c_c ( ConstSpiceChar     * name,$/;"	signature:( ConstSpiceChar * name, SpiceInt * code, SpiceBoolean * found )
bods2c_c	SpiceZpr.h	/^   void              bods2c_c ( ConstSpiceChar     * name,$/;"	signature:( ConstSpiceChar * name, SpiceInt * code, SpiceBoolean * found )
bodvar_c	SpiceZpr.h	/^   void              bodvar_c ( SpiceInt             body,$/;"	signature:( SpiceInt body, ConstSpiceChar * item, SpiceInt * dim , SpiceDouble * values )
bodvcd_c	SpiceZpr.h	/^   void              bodvcd_c ( SpiceInt             body,$/;"	signature:( SpiceInt body, ConstSpiceChar * item, SpiceInt maxn, SpiceInt * dim , SpiceDouble * values )
bodvrd_c	SpiceZpr.h	/^   void              bodvrd_c ( ConstSpiceChar     * body,$/;"	signature:( ConstSpiceChar * body, ConstSpiceChar * item, SpiceInt maxn, SpiceInt * dim , SpiceDouble * values )
brcktd_c	SpiceZpr.h	/^   SpiceDouble       brcktd_c ( SpiceDouble          number,$/;"	signature:( SpiceDouble number, SpiceDouble end1, SpiceDouble end2 )
brckti_c	SpiceZpr.h	/^   SpiceInt          brckti_c ( SpiceInt             number,$/;"	signature:( SpiceInt number, SpiceInt end1, SpiceInt end2 )
bschoc_c	SpiceZpr.h	/^   SpiceInt          bschoc_c ( ConstSpiceChar     * value,$/;"	signature:( ConstSpiceChar * value, SpiceInt ndim, SpiceInt lenvals, const void * array, ConstSpiceInt * order )
bschoi_c	SpiceZpr.h	/^   SpiceInt          bschoi_c ( SpiceInt             value,$/;"	signature:( SpiceInt value, SpiceInt ndim, ConstSpiceInt * array, ConstSpiceInt * order )
bsrchc_c	SpiceZpr.h	/^   SpiceInt          bsrchc_c ( ConstSpiceChar     * value,$/;"	signature:( ConstSpiceChar * value, SpiceInt ndim, SpiceInt lenvals, const void * array )
bsrchd_c	SpiceZpr.h	/^   SpiceInt          bsrchd_c ( SpiceDouble          value,$/;"	signature:( SpiceDouble value, SpiceInt ndim, ConstSpiceDouble * array )
bsrchi_c	SpiceZpr.h	/^   SpiceInt          bsrchi_c ( SpiceInt             value,$/;"	signature:( SpiceInt value, SpiceInt ndim, ConstSpiceInt * array )
card_c	SpiceZpr.h	/^   SpiceInt          card_c   ( SpiceCell         * cell );$/;"	signature:( SpiceCell * cell )
ccifrm_c	SpiceZpr.h	/^   void              ccifrm_c ( SpiceInt            frclss,$/;"	signature:( SpiceInt frclss, SpiceInt clssid, SpiceInt lenout, SpiceInt * frcode, SpiceChar * frname, SpiceInt * center, SpiceBoolean * found )
cgv2el_c	SpiceZpr.h	/^   void              cgv2el_c ( ConstSpiceDouble    center[3],$/;"	signature:( ConstSpiceDouble center[3], ConstSpiceDouble vec1 [3], ConstSpiceDouble vec2 [3], SpiceEllipse * ellipse )
chbder_c	SpiceZpr.h	/^   void              chbder_c ( ConstSpiceDouble * cp,$/;"	signature:( ConstSpiceDouble * cp, SpiceInt degp, SpiceDouble x2s[2], SpiceDouble x, SpiceInt nderiv, SpiceDouble * partdp, SpiceDouble * dpdxs )
chkin_c	SpiceZpr.h	/^   void              chkin_c  ( ConstSpiceChar    * module );$/;"	signature:( ConstSpiceChar * module )
chkout_c	SpiceZpr.h	/^   void              chkout_c ( ConstSpiceChar    * module );$/;"	signature:( ConstSpiceChar * module )
cidfrm_c	SpiceZpr.h	/^   void              cidfrm_c ( SpiceInt            cent,$/;"	signature:( SpiceInt cent, SpiceInt lenout, SpiceInt * frcode, SpiceChar * frname, SpiceBoolean * found )
ckcls_c	SpiceZpr.h	/^   void              ckcls_c  ( SpiceInt            handle );$/;"	signature:( SpiceInt handle )
ckcov_c	SpiceZpr.h	/^   void              ckcov_c  ( ConstSpiceChar    * ck,$/;"	signature:( ConstSpiceChar * ck, SpiceInt idcode, SpiceBoolean needav, ConstSpiceChar * level, SpiceDouble tol, ConstSpiceChar * timsys, SpiceCell * cover )
ckgp_c	SpiceZpr.h	/^   void              ckgp_c   ( SpiceInt            inst,$/;"	signature:( SpiceInt inst, SpiceDouble sclkdp, SpiceDouble tol, ConstSpiceChar * ref, SpiceDouble cmat[3][3], SpiceDouble * clkout, SpiceBoolean * found )
ckgpav_c	SpiceZpr.h	/^   void              ckgpav_c ( SpiceInt            inst,$/;"	signature:( SpiceInt inst, SpiceDouble sclkdp, SpiceDouble tol, ConstSpiceChar * ref, SpiceDouble cmat[3][3], SpiceDouble av[3], SpiceDouble * clkout, SpiceBoolean * found )
cklpf_c	SpiceZpr.h	/^   void              cklpf_c  ( ConstSpiceChar    * fname,$/;"	signature:( ConstSpiceChar * fname, SpiceInt * handle )
ckobj_c	SpiceZpr.h	/^   void              ckobj_c  ( ConstSpiceChar    * ck,$/;"	signature:( ConstSpiceChar * ck, SpiceCell * ids )
ckopn_c	SpiceZpr.h	/^   void              ckopn_c  ( ConstSpiceChar    * name,$/;"	signature:( ConstSpiceChar * name, ConstSpiceChar * ifname, SpiceInt ncomch, SpiceInt * handle )
ckupf_c	SpiceZpr.h	/^   void              ckupf_c  ( SpiceInt            handle );$/;"	signature:( SpiceInt handle )
ckw01_c	SpiceZpr.h	/^   void              ckw01_c  ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, SpiceDouble begtime, SpiceDouble endtime, SpiceInt inst, ConstSpiceChar * ref, SpiceBoolean avflag, ConstSpiceChar * segid, SpiceInt nrec, ConstSpiceDouble sclkdp [], ConstSpiceDouble quats [][4], ConstSpiceDouble avvs [][3] )
ckw02_c	SpiceZpr.h	/^   void              ckw02_c  ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, SpiceDouble begtim, SpiceDouble endtim, SpiceInt inst, ConstSpiceChar * ref, ConstSpiceChar * segid, SpiceInt nrec, ConstSpiceDouble start [], ConstSpiceDouble stop [], ConstSpiceDouble quats [][4], ConstSpiceDouble avvs [][3], ConstSpiceDouble rates [] )
ckw03_c	SpiceZpr.h	/^   void              ckw03_c  ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, SpiceDouble begtim, SpiceDouble endtim, SpiceInt inst, ConstSpiceChar * ref, SpiceBoolean avflag, ConstSpiceChar * segid, SpiceInt nrec, ConstSpiceDouble sclkdp [], ConstSpiceDouble quats [][4], ConstSpiceDouble avvs [][3], SpiceInt nints, ConstSpiceDouble starts [] )
ckw05_c	SpiceZpr.h	/^   void              ckw05_c  ( SpiceInt             handle,$/;"	signature:( SpiceInt handle, SpiceCK05Subtype subtyp, SpiceInt degree, SpiceDouble begtim, SpiceDouble endtim, SpiceInt inst, ConstSpiceChar * ref, SpiceBoolean avflag, ConstSpiceChar * segid, SpiceInt n, ConstSpiceDouble sclkdp[], const void * packets, SpiceDouble rate, SpiceInt nints, ConstSpiceDouble starts[] )
cleard_c	SpiceZpr.h	/^   void              cleard_c ( SpiceInt             ndim,$/;"	signature:( SpiceInt ndim, SpiceDouble * array )
clight_c	SpiceZpr.h	/^   SpiceDouble       clight_c ( void );$/;"	signature:( void )
clpool_c	SpiceZpr.h	/^   void              clpool_c ( void );$/;"	signature:( void )
cmprss_c	SpiceZpr.h	/^   void              cmprss_c ( SpiceChar           delim,$/;"	signature:( SpiceChar delim, SpiceInt n, ConstSpiceChar * input, SpiceInt lenout, SpiceChar * output )
cnmfrm_c	SpiceZpr.h	/^   void              cnmfrm_c ( ConstSpiceChar    * cname,$/;"	signature:( ConstSpiceChar * cname, SpiceInt lenout, SpiceInt * frcode, SpiceChar * frname, SpiceBoolean * found )
conics_c	SpiceZpr.h	/^   void              conics_c ( ConstSpiceDouble    elts[8],$/;"	signature:( ConstSpiceDouble elts[8], SpiceDouble et, SpiceDouble state[6] )
convrt_c	SpiceZpr.h	/^   void              convrt_c ( SpiceDouble         x,$/;"	signature:( SpiceDouble x, ConstSpiceChar * in, ConstSpiceChar * out, SpiceDouble * y )
copy_c	SpiceZpr.h	/^   void              copy_c   ( SpiceCell         * a,$/;"	signature:( SpiceCell * a, SpiceCell * b )
cpos_c	SpiceZpr.h	/^   SpiceInt          cpos_c   ( ConstSpiceChar    * str,$/;"	signature:( ConstSpiceChar * str, ConstSpiceChar * chars, SpiceInt start )
cposr_c	SpiceZpr.h	/^   SpiceInt          cposr_c  ( ConstSpiceChar    * str,$/;"	signature:( ConstSpiceChar * str, ConstSpiceChar * chars, SpiceInt start )
cvpool_c	SpiceZpr.h	/^   void              cvpool_c ( ConstSpiceChar    * agent,$/;"	signature:( ConstSpiceChar * agent, SpiceBoolean * update )
cyllat_c	SpiceZpr.h	/^   void              cyllat_c ( SpiceDouble         r,$/;"	signature:( SpiceDouble r, SpiceDouble lonc, SpiceDouble z, SpiceDouble * radius, SpiceDouble * lon, SpiceDouble * lat )
cylrec_c	SpiceZpr.h	/^   void              cylrec_c ( SpiceDouble         r,$/;"	signature:( SpiceDouble r, SpiceDouble lon, SpiceDouble z, SpiceDouble rectan[3] )
cylsph_c	SpiceZpr.h	/^   void              cylsph_c ( SpiceDouble         r,$/;"	signature:( SpiceDouble r, SpiceDouble lonc, SpiceDouble z, SpiceDouble * radius, SpiceDouble * colat, SpiceDouble * lon )
dafac_c	SpiceZpr.h	/^   void              dafac_c  ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, SpiceInt n, SpiceInt lenvals, const void * buffer )
dafbbs_c	SpiceZpr.h	/^   void              dafbbs_c ( SpiceInt            handle );$/;"	signature:( SpiceInt handle )
dafbfs_c	SpiceZpr.h	/^   void              dafbfs_c ( SpiceInt            handle );$/;"	signature:( SpiceInt handle )
dafcls_c	SpiceZpr.h	/^   void              dafcls_c ( SpiceInt            handle );$/;"	signature:( SpiceInt handle )
dafcs_c	SpiceZpr.h	/^   void              dafcs_c  ( SpiceInt            handle );$/;"	signature:( SpiceInt handle )
dafdc_c	SpiceZpr.h	/^   void              dafdc_c  ( SpiceInt            handle );$/;"	signature:( SpiceInt handle )
dafec_c	SpiceZpr.h	/^   void              dafec_c  ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, SpiceInt bufsiz, SpiceInt lenout, SpiceInt * n, void * buffer, SpiceBoolean * done )
daffna_c	SpiceZpr.h	/^   void              daffna_c ( SpiceBoolean      * found );$/;"	signature:( SpiceBoolean * found )
daffpa_c	SpiceZpr.h	/^   void              daffpa_c ( SpiceBoolean      * found );$/;"	signature:( SpiceBoolean * found )
dafgda_c	SpiceZpr.h	/^   void              dafgda_c ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, SpiceInt begin, SpiceInt end, SpiceDouble * data )
dafgh_c	SpiceZpr.h	/^   void              dafgh_c  ( SpiceInt          * handle );$/;"	signature:( SpiceInt * handle )
dafgn_c	SpiceZpr.h	/^   void              dafgn_c  ( SpiceInt            lenout,$/;"	signature:( SpiceInt lenout, SpiceChar * name )
dafgs_c	SpiceZpr.h	/^   void              dafgs_c  ( SpiceDouble         sum[] );$/;"	signature:( SpiceDouble sum[] )
dafgsr_c	SpiceZpr.h	/^   void              dafgsr_c ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, SpiceInt recno, SpiceInt begin, SpiceInt end, SpiceDouble * data, SpiceBoolean * found )
dafopr_c	SpiceZpr.h	/^   void              dafopr_c ( ConstSpiceChar    * fname,$/;"	signature:( ConstSpiceChar * fname, SpiceInt * handle )
dafopw_c	SpiceZpr.h	/^   void              dafopw_c ( ConstSpiceChar    * fname,$/;"	signature:( ConstSpiceChar * fname, SpiceInt * handle )
dafps_c	SpiceZpr.h	/^   void              dafps_c  ( SpiceInt            nd,$/;"	signature:( SpiceInt nd, SpiceInt ni, ConstSpiceDouble dc [], ConstSpiceInt ic [], SpiceDouble sum [] )
dafrda_c	SpiceZpr.h	/^   void              dafrda_c ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, SpiceInt begin, SpiceInt end, SpiceDouble * data )
dafrfr_c	SpiceZpr.h	/^   void              dafrfr_c ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, SpiceInt lenout, SpiceInt * nd, SpiceInt * ni, SpiceChar * ifname, SpiceInt * fward, SpiceInt * bward, SpiceInt * free )
dafrs_c	SpiceZpr.h	/^   void              dafrs_c  ( ConstSpiceDouble  * sum );$/;"	signature:( ConstSpiceDouble * sum )
dafus_c	SpiceZpr.h	/^   void              dafus_c  ( ConstSpiceDouble    sum [],$/;"	signature:( ConstSpiceDouble sum [], SpiceInt nd, SpiceInt ni, SpiceDouble dc [], SpiceInt ic [] )
dasac_c	SpiceZpr.h	/^   void              dasac_c  ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, SpiceInt n, SpiceInt buflen, const void * buffer )
dascls_c	SpiceZpr.h	/^   void              dascls_c ( SpiceInt            handle );$/;"	signature:( SpiceInt handle )
dasdc_c	SpiceZpr.h	/^   void              dasdc_c  ( SpiceInt            handle );$/;"	signature:( SpiceInt handle )
dasec_c	SpiceZpr.h	/^   void              dasec_c  ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, SpiceInt bufsiz, SpiceInt buflen, SpiceInt * n, void * buffer, SpiceBoolean * done )
dashfn_c	SpiceZpr.h	/^   void              dashfn_c ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, SpiceInt namlen, SpiceChar * fname )
dasopr_c	SpiceZpr.h	/^   void              dasopr_c ( ConstSpiceChar    * fname,$/;"	signature:( ConstSpiceChar * fname, SpiceInt * handle )
dasopw_c	SpiceZpr.h	/^   void              dasopw_c ( ConstSpiceChar    * fname,$/;"	signature:( ConstSpiceChar * fname, SpiceInt * handle )
dasrfr_c	SpiceZpr.h	/^   void              dasrfr_c ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, SpiceInt idwlen, SpiceInt ifnlen, SpiceChar * idword, SpiceChar * ifname, SpiceInt * nresvr, SpiceInt * nresvc, SpiceInt * ncomr, SpiceInt * ncomc )
dcyldr_c	SpiceZpr.h	/^   void              dcyldr_c ( SpiceDouble         x,$/;"	signature:( SpiceDouble x, SpiceDouble y, SpiceDouble z, SpiceDouble jacobi[3][3] )
deltet_c	SpiceZpr.h	/^   void              deltet_c ( SpiceDouble         epoch,$/;"	signature:( SpiceDouble epoch, ConstSpiceChar * eptype, SpiceDouble * delta )
det_c	SpiceZpr.h	/^   SpiceDouble       det_c    ( ConstSpiceDouble    m1[3][3] );$/;"	signature:( ConstSpiceDouble m1[3][3] )
dgeodr_c	SpiceZpr.h	/^   void              dgeodr_c ( SpiceDouble         x,$/;"	signature:( SpiceDouble x, SpiceDouble y, SpiceDouble z, SpiceDouble re, SpiceDouble f, SpiceDouble jacobi[3][3] )
diags2_c	SpiceZpr.h	/^   void              diags2_c ( ConstSpiceDouble    symmat [2][2],$/;"	signature:( ConstSpiceDouble symmat [2][2], SpiceDouble diag [2][2], SpiceDouble rotate [2][2] )
diff_c	SpiceZpr.h	/^   void              diff_c   ( SpiceCell         * a,$/;"	signature:( SpiceCell * a, SpiceCell * b, SpiceCell * c )
dlabbs_c	SpiceZpr.h	/^   void              dlabbs_c ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, SpiceDLADescr * descr, SpiceBoolean * found )
dlabfs_c	SpiceZpr.h	/^   void              dlabfs_c ( SpiceInt          handle,$/;"	signature:( SpiceInt handle, SpiceDLADescr * descr, SpiceBoolean * found )
dlafns_c	SpiceZpr.h	/^   void              dlafns_c ( SpiceInt               handle,$/;"	signature:( SpiceInt handle, ConstSpiceDLADescr * descr, SpiceDLADescr * nxtdsc, SpiceBoolean * found )
dlafps_c	SpiceZpr.h	/^   void              dlafps_c ( SpiceInt               handle,$/;"	signature:( SpiceInt handle, ConstSpiceDLADescr * descr, SpiceDLADescr * prvdsc, SpiceBoolean * found )
dlatdr_c	SpiceZpr.h	/^   void              dlatdr_c ( SpiceDouble         x,$/;"	signature:( SpiceDouble x, SpiceDouble y, SpiceDouble z, SpiceDouble jacobi[3][3] )
dp2hx_c	SpiceZpr.h	/^   void              dp2hx_c  ( SpiceDouble   number,$/;"	signature:( SpiceDouble number, SpiceInt lenout, SpiceChar * string, SpiceInt * length )
dpgrdr_c	SpiceZpr.h	/^   void              dpgrdr_c ( ConstSpiceChar    * body,$/;"	signature:( ConstSpiceChar * body, SpiceDouble x, SpiceDouble y, SpiceDouble z, SpiceDouble re, SpiceDouble f, SpiceDouble jacobi[3][3] )
dpmax_	SpiceZpr.h	/^   SpiceDouble       dpmax_   ( void );$/;"	signature:( void )
dpmax_c	SpiceZpr.h	/^   SpiceDouble       dpmax_c  ( void );$/;"	signature:( void )
dpmin_	SpiceZpr.h	/^   SpiceDouble       dpmin_   ( void );$/;"	signature:( void )
dpmin_c	SpiceZpr.h	/^   SpiceDouble       dpmin_c  ( void );$/;"	signature:( void )
dpr_c	SpiceZpr.h	/^   SpiceDouble       dpr_c    ( void );$/;"	signature:( void )
drdcyl_c	SpiceZpr.h	/^   void              drdcyl_c ( SpiceDouble         r,$/;"	signature:( SpiceDouble r, SpiceDouble lon, SpiceDouble z, SpiceDouble jacobi[3][3] )
drdgeo_c	SpiceZpr.h	/^   void              drdgeo_c ( SpiceDouble         lon,$/;"	signature:( SpiceDouble lon, SpiceDouble lat, SpiceDouble alt, SpiceDouble re, SpiceDouble f, SpiceDouble jacobi[3][3] )
drdlat_c	SpiceZpr.h	/^   void              drdlat_c ( SpiceDouble         r,$/;"	signature:( SpiceDouble r, SpiceDouble lon, SpiceDouble lat, SpiceDouble jacobi[3][3] )
drdpgr_c	SpiceZpr.h	/^   void              drdpgr_c ( ConstSpiceChar    * body,$/;"	signature:( ConstSpiceChar * body, SpiceDouble lon, SpiceDouble lat, SpiceDouble alt, SpiceDouble re, SpiceDouble f, SpiceDouble jacobi[3][3] )
drdsph_c	SpiceZpr.h	/^   void              drdsph_c ( SpiceDouble         r,$/;"	signature:( SpiceDouble r, SpiceDouble colat, SpiceDouble lon, SpiceDouble jacobi[3][3] )
dskb02_c	SpiceZpr.h	/^   void              dskb02_c ( SpiceInt               handle,$/;"	signature:( SpiceInt handle, ConstSpiceDLADescr * dladsc, SpiceInt * nv, SpiceInt * np, SpiceInt * nvxtot, SpiceDouble vtxbds [3][2], SpiceDouble * voxsiz, SpiceDouble voxori [3], SpiceInt vgrext [3], SpiceInt * cgscal, SpiceInt * vtxnpl, SpiceInt * voxnpt, SpiceInt * voxnpl )
dskcls_c	SpiceZpr.h	/^   void              dskcls_c ( SpiceInt               handle,$/;"	signature:( SpiceInt handle, SpiceBoolean optmiz )
dskd02_c	SpiceZpr.h	/^   void              dskd02_c ( SpiceInt               handle,$/;"	signature:( SpiceInt handle, ConstSpiceDLADescr * dladsc, SpiceInt item, SpiceInt start, SpiceInt room, SpiceInt * n, SpiceDouble * values )
dskgd_c	SpiceZpr.h	/^   void              dskgd_c  ( SpiceInt               handle,$/;"	signature:( SpiceInt handle, ConstSpiceDLADescr * dladsc, SpiceDSKDescr * dskdsc )
dskgtl_c	SpiceZpr.h	/^   void              dskgtl_c ( SpiceInt               keywrd,$/;"	signature:( SpiceInt keywrd, SpiceDouble * dpval )
dski02_c	SpiceZpr.h	/^   void              dski02_c ( SpiceInt              handle,$/;"	signature:( SpiceInt handle, ConstSpiceDLADescr * dladsc, SpiceInt item, SpiceInt start, SpiceInt room, SpiceInt * n, SpiceInt * values )
dskmi2_c	SpiceZpr.h	/^   void              dskmi2_c ( SpiceInt              nv,$/;"	signature:( SpiceInt nv, ConstSpiceDouble vrtces[][3], SpiceInt np, ConstSpiceInt plates[][3], SpiceDouble finscl, SpiceInt corscl, SpiceInt worksz, SpiceInt voxpsz, SpiceInt voxlsz, SpiceBoolean makvtl, SpiceInt spxisz, SpiceInt work [][2], SpiceDouble spaixd [], SpiceInt spaixi [] )
dskn02_c	SpiceZpr.h	/^   void              dskn02_c ( SpiceInt              handle,$/;"	signature:( SpiceInt handle, ConstSpiceDLADescr * dladsc, SpiceInt plid, SpiceDouble normal[3] )
dskobj_c	SpiceZpr.h	/^   void              dskobj_c ( ConstSpiceChar      * dsk,$/;"	signature:( ConstSpiceChar * dsk, SpiceCell * bodids )
dskopn_c	SpiceZpr.h	/^   void              dskopn_c ( ConstSpiceChar      * fname,$/;"	signature:( ConstSpiceChar * fname, ConstSpiceChar * ifname, SpiceInt ncomch, SpiceInt * handle )
dskp02_c	SpiceZpr.h	/^   void              dskp02_c ( SpiceInt              handle,$/;"	signature:( SpiceInt handle, ConstSpiceDLADescr * dladsc, SpiceInt start, SpiceInt room, SpiceInt * n, SpiceInt plates[][3] )
dskrb2_c	SpiceZpr.h	/^   void              dskrb2_c ( SpiceInt              nv,$/;"	signature:( SpiceInt nv, ConstSpiceDouble vrtces[][3], SpiceInt np, ConstSpiceInt plates[][3], SpiceInt corsys, ConstSpiceDouble corpar[], SpiceDouble * mncor3, SpiceDouble * mxcor3 )
dsksrf_c	SpiceZpr.h	/^   void              dsksrf_c ( ConstSpiceChar      * dsk,$/;"	signature:( ConstSpiceChar * dsk, SpiceInt bodyid, SpiceCell * srfids )
dskstl_c	SpiceZpr.h	/^   void              dskstl_c ( SpiceInt               keywrd,$/;"	signature:( SpiceInt keywrd, SpiceDouble dpval )
dskv02_c	SpiceZpr.h	/^   void              dskv02_c ( SpiceInt               handle,$/;"	signature:( SpiceInt handle, ConstSpiceDLADescr * dladsc, SpiceInt start, SpiceInt room, SpiceInt * n, SpiceDouble vrtces[][3] )
dskw02_c	SpiceZpr.h	/^   void              dskw02_c ( SpiceInt               handle,$/;"	signature:( SpiceInt handle, SpiceInt center, SpiceInt surfce, SpiceInt dclass, ConstSpiceChar * frame, SpiceInt corsys, ConstSpiceDouble corpar[], SpiceDouble mncor1, SpiceDouble mxcor1, SpiceDouble mncor2, SpiceDouble mxcor2, SpiceDouble mncor3, SpiceDouble mxcor3, SpiceDouble first, SpiceDouble last, SpiceInt nv, ConstSpiceDouble vrtces[][3], SpiceInt np, ConstSpiceInt plates[][3], ConstSpiceDouble spaixd[], ConstSpiceInt spaixi[] )
dskx02_c	SpiceZpr.h	/^   void              dskx02_c ( SpiceInt               handle,$/;"	signature:( SpiceInt handle, ConstSpiceDLADescr * dladsc, ConstSpiceDouble vertex [3], ConstSpiceDouble raydir [3], SpiceInt * plid, SpiceDouble xpt [3], SpiceBoolean * found )
dskxsi_c	SpiceZpr.h	/^   void              dskxsi_c ( SpiceBoolean           pri,$/;"	signature:( SpiceBoolean pri, ConstSpiceChar * target, SpiceInt nsurf, ConstSpiceInt srflst [], SpiceDouble et, ConstSpiceChar * fixref, ConstSpiceDouble vertex [3], ConstSpiceDouble raydir [3], SpiceInt maxd, SpiceInt maxi, SpiceDouble xpt [3], SpiceInt * handle, SpiceDLADescr * dladsc, SpiceDSKDescr * dskdsc, SpiceDouble dc [], SpiceInt ic [], SpiceBoolean * found )
dskxv_c	SpiceZpr.h	/^   void               dskxv_c ( SpiceBoolean           pri,$/;"	signature:( SpiceBoolean pri, ConstSpiceChar * target, SpiceInt nsurf, ConstSpiceInt srflst[], SpiceDouble et, ConstSpiceChar * fixref, SpiceInt nrays, ConstSpiceDouble vtxarr[][3], ConstSpiceDouble dirarr[][3], SpiceDouble xptarr[][3], SpiceBoolean fndarr[] )
dskz02_c	SpiceZpr.h	/^   void              dskz02_c ( SpiceInt               handle,$/;"	signature:( SpiceInt handle, ConstSpiceDLADescr * dladsc, SpiceInt * nv, SpiceInt * np )
dsphdr_c	SpiceZpr.h	/^   void              dsphdr_c ( SpiceDouble         x,$/;"	signature:( SpiceDouble x, SpiceDouble y, SpiceDouble z, SpiceDouble jacobi[3][3] )
dtpool_c	SpiceZpr.h	/^   void              dtpool_c ( ConstSpiceChar      * name,$/;"	signature:( ConstSpiceChar * name, SpiceBoolean * found, SpiceInt * n, SpiceChar type [1] )
ducrss_c	SpiceZpr.h	/^   void              ducrss_c ( ConstSpiceDouble      s1  [6],$/;"	signature:( ConstSpiceDouble s1 [6], ConstSpiceDouble s2 [6], SpiceDouble sout[6] )
dvcrss_c	SpiceZpr.h	/^   void              dvcrss_c ( ConstSpiceDouble      s1  [6],$/;"	signature:( ConstSpiceDouble s1 [6], ConstSpiceDouble s2 [6], SpiceDouble sout[6] )
dvdot_c	SpiceZpr.h	/^   SpiceDouble       dvdot_c  ( ConstSpiceDouble      s1 [6],$/;"	signature:( ConstSpiceDouble s1 [6], ConstSpiceDouble s2 [6] )
dvhat_c	SpiceZpr.h	/^   void              dvhat_c  ( ConstSpiceDouble      s1  [6],$/;"	signature:( ConstSpiceDouble s1 [6], SpiceDouble sout[6] )
dvnorm_c	SpiceZpr.h	/^   SpiceDouble       dvnorm_c ( ConstSpiceDouble      state[6] );$/;"	signature:( ConstSpiceDouble state[6] )
dvpool_c	SpiceZpr.h	/^   void              dvpool_c ( ConstSpiceChar      * name );$/;"	signature:( ConstSpiceChar * name )
dvsep_c	SpiceZpr.h	/^   SpiceDouble       dvsep_c  ( ConstSpiceDouble    * s1,$/;"	signature:( ConstSpiceDouble * s1, ConstSpiceDouble * s2 )
edlimb_c	SpiceZpr.h	/^   void              edlimb_c ( SpiceDouble           a,$/;"	signature:( SpiceDouble a, SpiceDouble b, SpiceDouble c, ConstSpiceDouble viewpt[3], SpiceEllipse * limb )
edterm_c	SpiceZpr.h	/^   void              edterm_c ( ConstSpiceChar      * trmtyp,$/;"	signature:( ConstSpiceChar * trmtyp, ConstSpiceChar * source, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * fixfrm, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, SpiceInt npts, SpiceDouble * trgepc, SpiceDouble obspos [3], SpiceDouble termpts [ ][3] )
ekacec_c	SpiceZpr.h	/^   void              ekacec_c ( SpiceInt              handle,$/;"	signature:( SpiceInt handle, SpiceInt segno, SpiceInt recno, ConstSpiceChar * column, SpiceInt nvals, SpiceInt vallen, const void * cvals, SpiceBoolean isnull )
ekaced_c	SpiceZpr.h	/^   void              ekaced_c ( SpiceInt              handle,$/;"	signature:( SpiceInt handle, SpiceInt segno, SpiceInt recno, ConstSpiceChar * column, SpiceInt nvals, ConstSpiceDouble * dvals, SpiceBoolean isnull )
ekacei_c	SpiceZpr.h	/^   void              ekacei_c ( SpiceInt              handle,$/;"	signature:( SpiceInt handle, SpiceInt segno, SpiceInt recno, ConstSpiceChar * column, SpiceInt nvals, ConstSpiceInt * ivals, SpiceBoolean isnull )
ekaclc_c	SpiceZpr.h	/^   void              ekaclc_c ( SpiceInt              handle,$/;"	signature:( SpiceInt handle, SpiceInt segno, ConstSpiceChar * column, SpiceInt vallen, const void * cvals, ConstSpiceInt * entszs, ConstSpiceBoolean * nlflgs, ConstSpiceInt * rcptrs, SpiceInt * wkindx )
ekacld_c	SpiceZpr.h	/^   void              ekacld_c ( SpiceInt              handle,$/;"	signature:( SpiceInt handle, SpiceInt segno, ConstSpiceChar * column, ConstSpiceDouble * dvals, ConstSpiceInt * entszs, ConstSpiceBoolean * nlflgs, ConstSpiceInt * rcptrs, SpiceInt * wkindx )
ekacli_c	SpiceZpr.h	/^   void              ekacli_c ( SpiceInt              handle,$/;"	signature:( SpiceInt handle, SpiceInt segno, ConstSpiceChar * column, ConstSpiceInt * ivals, ConstSpiceInt * entszs, ConstSpiceBoolean * nlflgs, ConstSpiceInt * rcptrs, SpiceInt * wkindx )
ekappr_c	SpiceZpr.h	/^   void              ekappr_c ( SpiceInt              handle,$/;"	signature:( SpiceInt handle, SpiceInt segno, SpiceInt * recno )
ekbseg_c	SpiceZpr.h	/^   void              ekbseg_c ( SpiceInt              handle,$/;"	signature:( SpiceInt handle, ConstSpiceChar * tabnam, SpiceInt ncols, SpiceInt cnmlen, const void * cnames, SpiceInt declen, const void * decls, SpiceInt * segno )
ekccnt_c	SpiceZpr.h	/^   void              ekccnt_c ( ConstSpiceChar      * table,$/;"	signature:( ConstSpiceChar * table, SpiceInt * ccount )
ekcii_c	SpiceZpr.h	/^   void              ekcii_c  ( ConstSpiceChar      * table,$/;"	signature:( ConstSpiceChar * table, SpiceInt cindex, SpiceInt lenout, SpiceChar * column, SpiceEKAttDsc * attdsc )
ekcls_c	SpiceZpr.h	/^   void              ekcls_c  ( SpiceInt              handle );$/;"	signature:( SpiceInt handle )
ekdelr_c	SpiceZpr.h	/^   void              ekdelr_c ( SpiceInt              handle,$/;"	signature:( SpiceInt handle, SpiceInt segno, SpiceInt recno )
ekffld_c	SpiceZpr.h	/^   void              ekffld_c ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, SpiceInt segno, SpiceInt * rcptrs )
ekfind_c	SpiceZpr.h	/^   void              ekfind_c ( ConstSpiceChar    * query,$/;"	signature:( ConstSpiceChar * query, SpiceInt lenout, SpiceInt * nmrows, SpiceBoolean * error, SpiceChar * errmsg )
ekgc_c	SpiceZpr.h	/^   void              ekgc_c   ( SpiceInt            selidx,$/;"	signature:( SpiceInt selidx, SpiceInt row, SpiceInt elment, SpiceInt lenout, SpiceChar * cdata, SpiceBoolean * null, SpiceBoolean * found )
ekgd_c	SpiceZpr.h	/^   void              ekgd_c   ( SpiceInt            selidx,$/;"	signature:( SpiceInt selidx, SpiceInt row, SpiceInt elment, SpiceDouble * ddata, SpiceBoolean * null, SpiceBoolean * found )
ekgi_c	SpiceZpr.h	/^   void              ekgi_c   ( SpiceInt            selidx,$/;"	signature:( SpiceInt selidx, SpiceInt row, SpiceInt elment, SpiceInt * idata, SpiceBoolean * null, SpiceBoolean * found )
ekifld_c	SpiceZpr.h	/^   void              ekifld_c ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, ConstSpiceChar * tabnam, SpiceInt ncols, SpiceInt nrows, SpiceInt cnmlen, const void * cnames, SpiceInt declen, const void * decls, SpiceInt * segno, SpiceInt * rcptrs )
ekinsr_c	SpiceZpr.h	/^   void              ekinsr_c ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, SpiceInt segno, SpiceInt recno )
eklef_c	SpiceZpr.h	/^   void              eklef_c  ( ConstSpiceChar    * fname,$/;"	signature:( ConstSpiceChar * fname, SpiceInt * handle )
eknelt_c	SpiceZpr.h	/^   SpiceInt          eknelt_c ( SpiceInt            selidx,$/;"	signature:( SpiceInt selidx, SpiceInt row )
eknseg_c	SpiceZpr.h	/^   SpiceInt          eknseg_c ( SpiceInt            handle );$/;"	signature:( SpiceInt handle )
ekntab_c	SpiceZpr.h	/^   void              ekntab_c ( SpiceInt            * n );$/;"	signature:( SpiceInt * n )
ekopn_c	SpiceZpr.h	/^   void              ekopn_c  ( ConstSpiceChar    * fname,$/;"	signature:( ConstSpiceChar * fname, ConstSpiceChar * ifname, SpiceInt ncomch, SpiceInt * handle )
ekopr_c	SpiceZpr.h	/^   void              ekopr_c  ( ConstSpiceChar    * fname,$/;"	signature:( ConstSpiceChar * fname, SpiceInt * handle )
ekops_c	SpiceZpr.h	/^   void              ekops_c  ( SpiceInt          * handle );$/;"	signature:( SpiceInt * handle )
ekopw_c	SpiceZpr.h	/^   void              ekopw_c  ( ConstSpiceChar    * fname,$/;"	signature:( ConstSpiceChar * fname, SpiceInt * handle )
ekpsel_c	SpiceZpr.h	/^   void              ekpsel_c ( ConstSpiceChar    * query,$/;"	signature:( ConstSpiceChar * query, SpiceInt msglen, SpiceInt tablen, SpiceInt collen, SpiceInt * n, SpiceInt * xbegs, SpiceInt * xends, SpiceEKDataType * xtypes, SpiceEKExprClass * xclass, void * tabs, void * cols, SpiceBoolean * error, SpiceChar * errmsg )
ekrcec_c	SpiceZpr.h	/^   void              ekrcec_c ( SpiceInt           handle,$/;"	signature:( SpiceInt handle, SpiceInt segno, SpiceInt recno, ConstSpiceChar * column, SpiceInt lenout, SpiceInt * nvals, void * cvals, SpiceBoolean * isnull )
ekrced_c	SpiceZpr.h	/^   void              ekrced_c ( SpiceInt           handle,$/;"	signature:( SpiceInt handle, SpiceInt segno, SpiceInt recno, ConstSpiceChar * column, SpiceInt * nvals, SpiceDouble * dvals, SpiceBoolean * isnull )
ekrcei_c	SpiceZpr.h	/^   void              ekrcei_c ( SpiceInt           handle,$/;"	signature:( SpiceInt handle, SpiceInt segno, SpiceInt recno, ConstSpiceChar * column, SpiceInt * nvals, SpiceInt * ivals, SpiceBoolean * isnull )
ekssum_c	SpiceZpr.h	/^   void              ekssum_c ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, SpiceInt segno, SpiceEKSegSum * segsum )
ektnam_c	SpiceZpr.h	/^   void              ektnam_c ( SpiceInt            n,$/;"	signature:( SpiceInt n, SpiceInt lenout, SpiceChar * table )
ekucec_c	SpiceZpr.h	/^   void              ekucec_c ( SpiceInt              handle,$/;"	signature:( SpiceInt handle, SpiceInt segno, SpiceInt recno, ConstSpiceChar * column, SpiceInt nvals, SpiceInt vallen, const void * cvals, SpiceBoolean isnull )
ekuced_c	SpiceZpr.h	/^   void              ekuced_c ( SpiceInt              handle,$/;"	signature:( SpiceInt handle, SpiceInt segno, SpiceInt recno, ConstSpiceChar * column, SpiceInt nvals, ConstSpiceDouble * dvals, SpiceBoolean isnull )
ekucei_c	SpiceZpr.h	/^   void              ekucei_c ( SpiceInt              handle,$/;"	signature:( SpiceInt handle, SpiceInt segno, SpiceInt recno, ConstSpiceChar * column, SpiceInt nvals, ConstSpiceInt * ivals, SpiceBoolean isnull )
ekuef_c	SpiceZpr.h	/^   void              ekuef_c  ( SpiceInt            handle );$/;"	signature:( SpiceInt handle )
el2cgv_c	SpiceZpr.h	/^   void              el2cgv_c ( ConstSpiceEllipse * ellipse,$/;"	signature:( ConstSpiceEllipse * ellipse, SpiceDouble center[3], SpiceDouble smajor[3], SpiceDouble sminor[3] )
elemc_c	SpiceZpr.h	/^   SpiceBoolean      elemc_c  ( ConstSpiceChar     * item,$/;"	signature:( ConstSpiceChar * item, SpiceCell * set )
elemd_c	SpiceZpr.h	/^   SpiceBoolean      elemd_c  ( SpiceDouble          item,$/;"	signature:( SpiceDouble item, SpiceCell * set )
elemi_c	SpiceZpr.h	/^   SpiceBoolean      elemi_c  ( SpiceInt             item,$/;"	signature:( SpiceInt item, SpiceCell * set )
eqncpv_c	SpiceZpr.h	/^   void              eqncpv_c ( SpiceDouble          et,$/;"	signature:( SpiceDouble et, SpiceDouble epoch, ConstSpiceDouble eqel[9], SpiceDouble rapol, SpiceDouble decpol, SpiceDouble state[6] )
eqstr_c	SpiceZpr.h	/^   SpiceBoolean      eqstr_c  ( ConstSpiceChar     * a,$/;"	signature:( ConstSpiceChar * a, ConstSpiceChar * b )
erract_c	SpiceZpr.h	/^   void              erract_c ( ConstSpiceChar    * operation,$/;"	signature:( ConstSpiceChar * operation, SpiceInt lenout, SpiceChar * action )
errch_c	SpiceZpr.h	/^   void              errch_c  ( ConstSpiceChar    * marker,$/;"	signature:( ConstSpiceChar * marker, ConstSpiceChar * string )
errdev_c	SpiceZpr.h	/^   void              errdev_c ( ConstSpiceChar    * operation,$/;"	signature:( ConstSpiceChar * operation, SpiceInt lenout, SpiceChar * device )
errdp_c	SpiceZpr.h	/^   void              errdp_c  ( ConstSpiceChar    * marker,$/;"	signature:( ConstSpiceChar * marker, SpiceDouble number )
errint_c	SpiceZpr.h	/^   void              errint_c ( ConstSpiceChar    * marker,$/;"	signature:( ConstSpiceChar * marker, SpiceInt number )
errprt_c	SpiceZpr.h	/^   void              errprt_c ( ConstSpiceChar    * operation,$/;"	signature:( ConstSpiceChar * operation, SpiceInt lenout, SpiceChar * list )
esrchc_c	SpiceZpr.h	/^   SpiceInt          esrchc_c ( ConstSpiceChar  * value,$/;"	signature:( ConstSpiceChar * value, SpiceInt ndim, SpiceInt lenvals, const void * array )
et2lst_c	SpiceZpr.h	/^   void              et2lst_c ( SpiceDouble         et,$/;"	signature:( SpiceDouble et, SpiceInt body, SpiceDouble lon, ConstSpiceChar * type, SpiceInt timlen, SpiceInt ampmlen, SpiceInt * hr, SpiceInt * mn, SpiceInt * sc, SpiceChar * time, SpiceChar * ampm )
et2utc_c	SpiceZpr.h	/^   void              et2utc_c ( SpiceDouble         et ,$/;"	signature:( SpiceDouble et , ConstSpiceChar * format, SpiceInt prec, SpiceInt lenout, SpiceChar * utcstr )
etcal_c	SpiceZpr.h	/^   void              etcal_c  ( SpiceDouble         et,$/;"	signature:( SpiceDouble et, SpiceInt lenout, SpiceChar * string )
eul2m_c	SpiceZpr.h	/^   void              eul2m_c  ( SpiceDouble         angle3,$/;"	signature:( SpiceDouble angle3, SpiceDouble angle2, SpiceDouble angle1, SpiceInt axis3, SpiceInt axis2, SpiceInt axis1, SpiceDouble r [3][3] )
eul2xf_c	SpiceZpr.h	/^   void              eul2xf_c ( ConstSpiceDouble    eulang[6],$/;"	signature:( ConstSpiceDouble eulang[6], SpiceInt axisa, SpiceInt axisb, SpiceInt axisc, SpiceDouble xform [6][6] )
exists_c	SpiceZpr.h	/^   SpiceBoolean      exists_c ( ConstSpiceChar    * name );$/;"	signature:( ConstSpiceChar * name )
expool_c	SpiceZpr.h	/^   void              expool_c ( ConstSpiceChar    * name,$/;"	signature:( ConstSpiceChar * name, SpiceBoolean * found )
failed_c	SpiceZpr.h	/^   SpiceBoolean      failed_c ( void );$/;"	signature:( void )
fovray_c	SpiceZpr.h	/^   void              fovray_c ( ConstSpiceChar   * inst,$/;"	signature:( ConstSpiceChar * inst, ConstSpiceDouble raydir [3], ConstSpiceChar * rframe, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, SpiceDouble * et, SpiceBoolean * visible )
fovtrg_c	SpiceZpr.h	/^   void              fovtrg_c ( ConstSpiceChar   * inst,$/;"	signature:( ConstSpiceChar * inst, ConstSpiceChar * target, ConstSpiceChar * tshape, ConstSpiceChar * tframe, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, SpiceDouble * et, SpiceBoolean * visible )
frame_c	SpiceZpr.h	/^   void              frame_c  ( SpiceDouble         x[3],$/;"	signature:( SpiceDouble x[3], SpiceDouble y[3], SpiceDouble z[3] )
frinfo_c	SpiceZpr.h	/^   void              frinfo_c ( SpiceInt            frcode,$/;"	signature:( SpiceInt frcode, SpiceInt * cent, SpiceInt * clss, SpiceInt * clssid, SpiceBoolean * found )
frmnam_c	SpiceZpr.h	/^   void              frmnam_c ( SpiceInt            frcode,$/;"	signature:( SpiceInt frcode, SpiceInt lenout, SpiceChar * frname )
ftncls_c	SpiceZpr.h	/^   void              ftncls_c ( SpiceInt            unit );$/;"	signature:( SpiceInt unit )
furnsh_c	SpiceZpr.h	/^   void              furnsh_c ( ConstSpiceChar    * file );$/;"	signature:( ConstSpiceChar * file )
gcpool_c	SpiceZpr.h	/^   void              gcpool_c ( ConstSpiceChar    * name,$/;"	signature:( ConstSpiceChar * name, SpiceInt start, SpiceInt room, SpiceInt lenout, SpiceInt * n, void * cvals, SpiceBoolean * found )
gdpool_c	SpiceZpr.h	/^   void              gdpool_c ( ConstSpiceChar    * name,$/;"	signature:( ConstSpiceChar * name, SpiceInt start, SpiceInt room, SpiceInt * n, SpiceDouble * values, SpiceBoolean * found )
georec_c	SpiceZpr.h	/^   void              georec_c ( SpiceDouble         lon,$/;"	signature:( SpiceDouble lon, SpiceDouble lat, SpiceDouble alt, SpiceDouble re, SpiceDouble f, SpiceDouble rectan[3] )
getcml_c	SpiceZpr.h	/^   void              getcml_c ( SpiceInt          * argc,$/;"	signature:( SpiceInt * argc, SpiceChar *** argv )
getelm_c	SpiceZpr.h	/^   void              getelm_c ( SpiceInt            frstyr,$/;"	signature:( SpiceInt frstyr, SpiceInt lineln, const void * lines, SpiceDouble * epoch, SpiceDouble * elems )
getfat_c	SpiceZpr.h	/^   void              getfat_c ( ConstSpiceChar    * file,$/;"	signature:( ConstSpiceChar * file, SpiceInt arclen, SpiceInt typlen, SpiceChar * arch, SpiceChar * type )
getfov_c	SpiceZpr.h	/^   void              getfov_c ( SpiceInt            instid,$/;"	signature:( SpiceInt instid, SpiceInt room, SpiceInt shapelen, SpiceInt framelen, SpiceChar * shape, SpiceChar * frame, SpiceDouble bsight [3], SpiceInt * n, SpiceDouble bounds [][3] )
getmsg_c	SpiceZpr.h	/^   void              getmsg_c ( ConstSpiceChar    * option,$/;"	signature:( ConstSpiceChar * option, SpiceInt lenout, SpiceChar * msg )
gfbail_c	SpiceZpr.h	/^   SpiceBoolean      gfbail_c ( void );$/;"	signature:( void )
gfclrh_c	SpiceZpr.h	/^   void              gfclrh_c ( void );$/;"	signature:( void )
gfdist_c	SpiceZpr.h	/^   void              gfdist_c ( ConstSpiceChar    * target,$/;"	signature:( ConstSpiceChar * target, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, ConstSpiceChar * relate, SpiceDouble refval, SpiceDouble adjust, SpiceDouble step, SpiceInt nintvls, SpiceCell * cnfine, SpiceCell * result )
gfevnt_c	SpiceZpr.h	/^   void  gfevnt_c ( void             ( * udstep ) ( SpiceDouble       et,$/;"	signature:( void ( * udstep ) ( SpiceDouble et, SpiceDouble * step ), void ( * udrefn ) ( SpiceDouble t1, SpiceDouble t2, SpiceBoolean s1, SpiceBoolean s2, SpiceDouble * t ), ConstSpiceChar * gquant, SpiceInt qnpars, SpiceInt lenvals, const void * qpnams, const void * qcpars, ConstSpiceDouble * qdpars, ConstSpiceInt * qipars, ConstSpiceBoolean * qlpars, ConstSpiceChar * op, SpiceDouble refval, SpiceDouble tol, SpiceDouble adjust, SpiceBoolean rpt, void ( * udrepi ) ( SpiceCell * cnfine, ConstSpiceChar * srcpre, ConstSpiceChar * srcsuf ), void ( * udrepu ) ( SpiceDouble ivbeg, SpiceDouble ivend, SpiceDouble et ), void ( * udrepf ) ( void ), SpiceInt nintvls, SpiceBoolean bail, SpiceBoolean ( * udbail ) ( void ), SpiceCell * cnfine, SpiceCell * result )
gffove_c	SpiceZpr.h	/^   void   gffove_c ( ConstSpiceChar    * inst,$/;"	signature:( ConstSpiceChar * inst, ConstSpiceChar * tshape, ConstSpiceDouble raydir [3], ConstSpiceChar * target, ConstSpiceChar * tframe, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, SpiceDouble tol, void ( * udstep ) ( SpiceDouble et, SpiceDouble * step ), void ( * udrefn ) ( SpiceDouble t1, SpiceDouble t2, SpiceBoolean s1, SpiceBoolean s2, SpiceDouble * t ), SpiceBoolean rpt, void ( * udrepi ) ( SpiceCell * cnfine, ConstSpiceChar * srcpre, ConstSpiceChar * srcsuf ), void ( * udrepu ) ( SpiceDouble ivbeg, SpiceDouble ivend, SpiceDouble et ), void ( * udrepf ) ( void ), SpiceBoolean bail, SpiceBoolean ( * udbail ) ( void ), SpiceCell * cnfine, SpiceCell * result )
gfilum_c	SpiceZpr.h	/^   void              gfilum_c ( ConstSpiceChar     * method,$/;"	signature:( ConstSpiceChar * method, ConstSpiceChar * angtyp, ConstSpiceChar * target, ConstSpiceChar * illum, ConstSpiceChar * fixref, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, ConstSpiceDouble spoint [3], ConstSpiceChar * relate, SpiceDouble refval, SpiceDouble adjust, SpiceDouble step, SpiceInt nintvls, SpiceCell * cnfine, SpiceCell * result )
gfinth_c	SpiceZpr.h	/^   void              gfinth_c ( int sigcode );$/;"	signature:( int sigcode )
gfocce_c	SpiceZpr.h	/^   void   gfocce_c ( ConstSpiceChar    * occtyp,$/;"	signature:( ConstSpiceChar * occtyp, ConstSpiceChar * front, ConstSpiceChar * fshape, ConstSpiceChar * fframe, ConstSpiceChar * back, ConstSpiceChar * bshape, ConstSpiceChar * bframe, ConstSpiceChar * obsrvr, ConstSpiceChar * abcorr, SpiceDouble tol, void ( * udstep ) ( SpiceDouble et, SpiceDouble * step ), void ( * udrefn ) ( SpiceDouble t1, SpiceDouble t2, SpiceBoolean s1, SpiceBoolean s2, SpiceDouble * t ), SpiceBoolean rpt, void ( * udrepi ) ( SpiceCell * cnfine, ConstSpiceChar * srcpre, ConstSpiceChar * srcsuf ), void ( * udrepu ) ( SpiceDouble ivbeg, SpiceDouble ivend, SpiceDouble et ), void ( * udrepf ) ( void ), SpiceBoolean bail, SpiceBoolean ( * udbail ) ( void ), SpiceCell * cnfine, SpiceCell * result )
gfoclt_c	SpiceZpr.h	/^   void              gfoclt_c ( ConstSpiceChar    * occtyp,$/;"	signature:( ConstSpiceChar * occtyp, ConstSpiceChar * front, ConstSpiceChar * fshape, ConstSpiceChar * fframe, ConstSpiceChar * back, ConstSpiceChar * bshape, ConstSpiceChar * bframe, ConstSpiceChar * obsrvr, ConstSpiceChar * abcorr, SpiceDouble step, SpiceCell * cnfine, SpiceCell * result )
gfpa_c	SpiceZpr.h	/^   void              gfpa_c ( ConstSpiceChar     * target,$/;"	signature:( ConstSpiceChar * target, ConstSpiceChar * illum, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, ConstSpiceChar * relate, SpiceDouble refval, SpiceDouble adjust, SpiceDouble step, SpiceInt nintvls, SpiceCell * cnfine, SpiceCell * result )
gfposc_c	SpiceZpr.h	/^   void              gfposc_c ( ConstSpiceChar    * target,$/;"	signature:( ConstSpiceChar * target, ConstSpiceChar * frame, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, ConstSpiceChar * crdsys, ConstSpiceChar * coord, ConstSpiceChar * relate, SpiceDouble refval, SpiceDouble adjust, SpiceDouble step, SpiceInt nintvls, SpiceCell * cnfine, SpiceCell * result )
gfrefn_c	SpiceZpr.h	/^   void              gfrefn_c ( SpiceDouble         t1,$/;"	signature:( SpiceDouble t1, SpiceDouble t2, SpiceBoolean s1, SpiceBoolean s2, SpiceDouble * t )
gfrepf_c	SpiceZpr.h	/^   void              gfrepf_c ( void );$/;"	signature:( void )
gfrepi_c	SpiceZpr.h	/^   void              gfrepi_c ( SpiceCell         * window,$/;"	signature:( SpiceCell * window, ConstSpiceChar * begmss, ConstSpiceChar * endmss )
gfrepu_c	SpiceZpr.h	/^   void              gfrepu_c ( SpiceDouble         ivbeg,$/;"	signature:( SpiceDouble ivbeg, SpiceDouble ivend, SpiceDouble time )
gfrfov_c	SpiceZpr.h	/^   void              gfrfov_c ( ConstSpiceChar    * inst,$/;"	signature:( ConstSpiceChar * inst, ConstSpiceDouble raydir [3], ConstSpiceChar * rframe, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, SpiceDouble step, SpiceCell * cnfine, SpiceCell * result )
gfrr_c	SpiceZpr.h	/^   void               gfrr_c ( ConstSpiceChar      * target,$/;"	signature:( ConstSpiceChar * target, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, ConstSpiceChar * relate, SpiceDouble refval, SpiceDouble adjust, SpiceDouble step, SpiceInt nintvls, SpiceCell * cnfine, SpiceCell * result )
gfsep_c	SpiceZpr.h	/^   void              gfsep_c  (  ConstSpiceChar   * targ1,$/;"	signature:( ConstSpiceChar * targ1, ConstSpiceChar * shape1, ConstSpiceChar * frame1, ConstSpiceChar * targ2, ConstSpiceChar * shape2, ConstSpiceChar * frame2, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, ConstSpiceChar * relate, SpiceDouble refval, SpiceDouble adjust, SpiceDouble step, SpiceInt nintvls, SpiceCell * cnfine, SpiceCell * result )
gfsntc_c	SpiceZpr.h	/^   void              gfsntc_c ( ConstSpiceChar    * target,$/;"	signature:( ConstSpiceChar * target, ConstSpiceChar * fixref, ConstSpiceChar * method, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, ConstSpiceChar * dref, ConstSpiceDouble dvec [3], ConstSpiceChar * crdsys, ConstSpiceChar * coord, ConstSpiceChar * relate, SpiceDouble refval, SpiceDouble adjust, SpiceDouble step, SpiceInt nintvls, SpiceCell * cnfine, SpiceCell * result )
gfsstp_c	SpiceZpr.h	/^   void              gfsstp_c ( SpiceDouble         step   );$/;"	signature:( SpiceDouble step )
gfstep_c	SpiceZpr.h	/^   void              gfstep_c ( SpiceDouble         time,$/;"	signature:( SpiceDouble time, SpiceDouble * step )
gfstol_c	SpiceZpr.h	/^   void              gfstol_c ( SpiceDouble         value );$/;"	signature:( SpiceDouble value )
gfsubc_c	SpiceZpr.h	/^   void              gfsubc_c ( ConstSpiceChar    * target,$/;"	signature:( ConstSpiceChar * target, ConstSpiceChar * fixref, ConstSpiceChar * method, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, ConstSpiceChar * crdsys, ConstSpiceChar * coord, ConstSpiceChar * relate, SpiceDouble refval, SpiceDouble adjust, SpiceDouble step, SpiceInt nintvls, SpiceCell * cnfine, SpiceCell * result )
gftfov_c	SpiceZpr.h	/^   void              gftfov_c ( ConstSpiceChar   * inst,$/;"	signature:( ConstSpiceChar * inst, ConstSpiceChar * target, ConstSpiceChar * tshape, ConstSpiceChar * tframe, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, SpiceDouble step, SpiceCell * cnfine, SpiceCell * result )
gfudb_c	SpiceZpr.h	/^   void              gfudb_c (  void ( * udfuns ) ( SpiceDouble       et,$/;"	signature:( void ( * udfuns ) ( SpiceDouble et, SpiceDouble * value ), void ( * udfunb ) ( void ( * udfuns ) ( SpiceDouble et, SpiceDouble * value ), SpiceDouble et, SpiceBoolean * xbool ), SpiceDouble step, SpiceCell * cnfine, SpiceCell * result )
gfuds_c	SpiceZpr.h	/^   void              gfuds_c (  void ( * udfuns ) ( SpiceDouble      et,$/;"	signature:( void ( * udfuns ) ( SpiceDouble et, SpiceDouble * value ), void ( * udfunb ) ( void ( * udfuns ) ( SpiceDouble et, SpiceDouble * value ), SpiceDouble x, SpiceBoolean * xbool ), ConstSpiceChar * relate, SpiceDouble refval, SpiceDouble adjust, SpiceDouble step, SpiceInt nintvls, SpiceCell * cnfine, SpiceCell * result )
gipool_c	SpiceZpr.h	/^   void              gipool_c ( ConstSpiceChar    * name,$/;"	signature:( ConstSpiceChar * name, SpiceInt start, SpiceInt room, SpiceInt * n, SpiceInt * ivals, SpiceBoolean * found )
gnpool_c	SpiceZpr.h	/^   void              gnpool_c ( ConstSpiceChar    * name,$/;"	signature:( ConstSpiceChar * name, SpiceInt start, SpiceInt room, SpiceInt lenout, SpiceInt * n, void * kvars, SpiceBoolean * found )
halfpi_c	SpiceZpr.h	/^   SpiceDouble       halfpi_c ( void );$/;"	signature:( void )
hrmint_c	SpiceZpr.h	/^  void               hrmint_c ( SpiceInt            n,$/;"	signature:( SpiceInt n, ConstSpiceDouble * xvals, ConstSpiceDouble * yvals, SpiceDouble x, SpiceDouble * work, SpiceDouble * f, SpiceDouble * df )
hx2dp_c	SpiceZpr.h	/^   void              hx2dp_c  ( ConstSpiceChar  * string,$/;"	signature:( ConstSpiceChar * string, SpiceInt lenout, SpiceDouble * number, SpiceBoolean * error, SpiceChar * errmsg )
ident_c	SpiceZpr.h	/^   void              ident_c  ( SpiceDouble         matrix[3][3] );$/;"	signature:( SpiceDouble matrix[3][3] )
illum_c	SpiceZpr.h	/^   void              illum_c  ( ConstSpiceChar    * target,$/;"	signature:( ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, ConstSpiceDouble spoint [3], SpiceDouble * phase, SpiceDouble * solar, SpiceDouble * emissn )
illum_pl02	SpiceZpr.h	/^   void              illum_pl02 ( SpiceInt               handle,$/;"	signature:( SpiceInt handle, ConstSpiceDLADescr * dladsc, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, SpiceDouble spoint [3], SpiceDouble * phase, SpiceDouble * solar, SpiceDouble * emissn )
illum_plid_pl02	SpiceZpr.h	/^   void              illum_plid_pl02 ( SpiceInt               handle,$/;"	signature:( SpiceInt handle, ConstSpiceDLADescr * dladsc, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, SpiceDouble spoint [3], SpiceInt plid, SpiceDouble * trgepc, SpiceDouble srfvec [3], SpiceDouble * phase, SpiceDouble * solar, SpiceDouble * emissn, SpiceBoolean * visible, SpiceBoolean * lit )
illumf_c	SpiceZpr.h	/^   void              illumf_c ( ConstSpiceChar    * method,$/;"	signature:( ConstSpiceChar * method, ConstSpiceChar * target, ConstSpiceChar * ilusrc, SpiceDouble et, ConstSpiceChar * fixref, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, ConstSpiceDouble spoint [3], SpiceDouble * trgepc, SpiceDouble srfvec [3], SpiceDouble * phase, SpiceDouble * incdnc, SpiceDouble * emissn, SpiceBoolean * visibl, SpiceBoolean * lit )
illumg_c	SpiceZpr.h	/^   void              illumg_c ( ConstSpiceChar    * method,$/;"	signature:( ConstSpiceChar * method, ConstSpiceChar * target, ConstSpiceChar * illum, SpiceDouble et, ConstSpiceChar * fixref, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, ConstSpiceDouble spoint [3], SpiceDouble * trgepc, SpiceDouble srfvec [3], SpiceDouble * phase, SpiceDouble * solar, SpiceDouble * emissn )
ilumin_c	SpiceZpr.h	/^   void              ilumin_c ( ConstSpiceChar    * method,$/;"	signature:( ConstSpiceChar * method, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * fixref, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, ConstSpiceDouble spoint [3], SpiceDouble * trgepc, SpiceDouble srfvec [3], SpiceDouble * phase, SpiceDouble * solar, SpiceDouble * emissn )
inedpl_c	SpiceZpr.h	/^   void              inedpl_c ( SpiceDouble         a,$/;"	signature:( SpiceDouble a, SpiceDouble b, SpiceDouble c, ConstSpicePlane * plane, SpiceEllipse * ellipse, SpiceBoolean * found )
inelpl_c	SpiceZpr.h	/^   void              inelpl_c ( ConstSpiceEllipse * ellips,$/;"	signature:( ConstSpiceEllipse * ellips, ConstSpicePlane * plane, SpiceInt * nxpts, SpiceDouble xpt1[3], SpiceDouble xpt2[3] )
inrypl_c	SpiceZpr.h	/^   void              inrypl_c ( ConstSpiceDouble    vertex [3],$/;"	signature:( ConstSpiceDouble vertex [3], ConstSpiceDouble dir [3], ConstSpicePlane * plane, SpiceInt * nxpts, SpiceDouble xpt [3] )
insrtc_c	SpiceZpr.h	/^   void              insrtc_c ( ConstSpiceChar     * item,$/;"	signature:( ConstSpiceChar * item, SpiceCell * set )
insrtd_c	SpiceZpr.h	/^   void              insrtd_c ( SpiceDouble          item,$/;"	signature:( SpiceDouble item, SpiceCell * set )
insrti_c	SpiceZpr.h	/^   void              insrti_c ( SpiceInt             item,$/;"	signature:( SpiceInt item, SpiceCell * set )
inter_c	SpiceZpr.h	/^   void              inter_c  (  SpiceCell        * a,$/;"	signature:( SpiceCell * a, SpiceCell * b, SpiceCell * c )
intmax_	SpiceZpr.h	/^   SpiceInt          intmax_  ( void );$/;"	signature:( void )
intmax_c	SpiceZpr.h	/^   SpiceInt          intmax_c ( void );$/;"	signature:( void )
intmin_	SpiceZpr.h	/^   SpiceInt          intmin_  ( void );$/;"	signature:( void )
intmin_c	SpiceZpr.h	/^   SpiceInt          intmin_c ( void );$/;"	signature:( void )
invert_c	SpiceZpr.h	/^   void              invert_c ( ConstSpiceDouble    m1[3][3],$/;"	signature:( ConstSpiceDouble m1[3][3], SpiceDouble m2[3][3] )
invort_c	SpiceZpr.h	/^   void              invort_c ( ConstSpiceDouble    m  [3][3],$/;"	signature:( ConstSpiceDouble m [3][3], SpiceDouble mit[3][3] )
isordv_c	SpiceZpr.h	/^   SpiceBoolean      isordv_c ( ConstSpiceInt     * array,$/;"	signature:( ConstSpiceInt * array, SpiceInt n )
isrchc_c	SpiceZpr.h	/^   SpiceInt          isrchc_c ( ConstSpiceChar  * value,$/;"	signature:( ConstSpiceChar * value, SpiceInt ndim, SpiceInt lenvals, const void * array )
isrchd_c	SpiceZpr.h	/^   SpiceInt          isrchd_c ( SpiceDouble          value,$/;"	signature:( SpiceDouble value, SpiceInt ndim, ConstSpiceDouble * array )
isrchi_c	SpiceZpr.h	/^   SpiceInt          isrchi_c ( SpiceInt             value,$/;"	signature:( SpiceInt value, SpiceInt ndim, ConstSpiceInt * array )
isrot_c	SpiceZpr.h	/^   SpiceBoolean      isrot_c  ( ConstSpiceDouble    m   [3][3],$/;"	signature:( ConstSpiceDouble m [3][3], SpiceDouble ntol, SpiceDouble dtol )
iswhsp_c	SpiceZpr.h	/^   SpiceBoolean      iswhsp_c ( ConstSpiceChar    * string );$/;"	signature:( ConstSpiceChar * string )
j1900_c	SpiceZpr.h	/^   SpiceDouble       j1900_c  ( void );$/;"	signature:( void )
j1950_c	SpiceZpr.h	/^   SpiceDouble       j1950_c  ( void );$/;"	signature:( void )
j2000_c	SpiceZpr.h	/^   SpiceDouble       j2000_c  ( void );$/;"	signature:( void )
j2100_c	SpiceZpr.h	/^   SpiceDouble       j2100_c  ( void );$/;"	signature:( void )
jyear_c	SpiceZpr.h	/^   SpiceDouble       jyear_c  ( void );$/;"	signature:( void )
kclear_c	SpiceZpr.h	/^   void              kclear_c ( void );$/;"	signature:( void )
kdata_c	SpiceZpr.h	/^   void              kdata_c  ( SpiceInt          which,$/;"	signature:( SpiceInt which, ConstSpiceChar * kind, SpiceInt fillen, SpiceInt typlen, SpiceInt srclen, SpiceChar * file, SpiceChar * filtyp, SpiceChar * source, SpiceInt * handle, SpiceBoolean * found )
kinfo_c	SpiceZpr.h	/^   void              kinfo_c  ( ConstSpiceChar  * file,$/;"	signature:( ConstSpiceChar * file, SpiceInt typlen, SpiceInt srclen, SpiceChar * filtyp, SpiceChar * source, SpiceInt * handle, SpiceBoolean * found )
kplfrm_c	SpiceZpr.h	/^   void              kplfrm_c ( SpiceInt             frmcls,$/;"	signature:( SpiceInt frmcls, SpiceCell * idset )
ktotal_c	SpiceZpr.h	/^   void              ktotal_c ( ConstSpiceChar   * kind,$/;"	signature:( ConstSpiceChar * kind, SpiceInt * count )
kxtrct_c	SpiceZpr.h	/^   void              kxtrct_c ( ConstSpiceChar       * keywd,$/;"	signature:( ConstSpiceChar * keywd, SpiceInt termlen, const void * terms, SpiceInt nterms, SpiceInt stringlen, SpiceInt substrlen, SpiceChar * string, SpiceBoolean * found, SpiceChar * substr )
lastnb_c	SpiceZpr.h	/^   SpiceInt          lastnb_c ( ConstSpiceChar    * string );$/;"	signature:( ConstSpiceChar * string )
latcyl_c	SpiceZpr.h	/^   void              latcyl_c ( SpiceDouble         radius,$/;"	signature:( SpiceDouble radius, SpiceDouble lon, SpiceDouble lat, SpiceDouble * r, SpiceDouble * lonc, SpiceDouble * z )
latrec_c	SpiceZpr.h	/^   void              latrec_c ( SpiceDouble         radius,$/;"	signature:( SpiceDouble radius, SpiceDouble longitude, SpiceDouble latitude, SpiceDouble rectan [3] )
latsph_c	SpiceZpr.h	/^   void              latsph_c ( SpiceDouble         radius,$/;"	signature:( SpiceDouble radius, SpiceDouble lon, SpiceDouble lat, SpiceDouble * rho, SpiceDouble * colat, SpiceDouble * lons )
latsrf_c	SpiceZpr.h	/^   void              latsrf_c ( ConstSpiceChar    * method,$/;"	signature:( ConstSpiceChar * method, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * fixref, SpiceInt npts, ConstSpiceDouble lonlat[][2], SpiceDouble srfpts[][3] )
lcase_c	SpiceZpr.h	/^   void              lcase_c  ( SpiceChar         * in,$/;"	signature:( SpiceChar * in, SpiceInt lenout, SpiceChar * out )
ldpool_c	SpiceZpr.h	/^   void              ldpool_c ( ConstSpiceChar    * filename );$/;"	signature:( ConstSpiceChar * filename )
lgrind_c	SpiceZpr.h	/^   void              lgrind_c ( SpiceInt            n,$/;"	signature:( SpiceInt n, ConstSpiceDouble * xvals, ConstSpiceDouble * yvals, SpiceDouble * work, SpiceDouble x, SpiceDouble * p, SpiceDouble * dp )
limb_pl02	SpiceZpr.h	/^   void              limb_pl02 ( SpiceInt              handle,$/;"	signature:( SpiceInt handle, ConstSpiceDLADescr * dladsc, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * fixref, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, SpiceInt npoints, SpiceDouble * trgepc, SpiceDouble obspos [3], SpiceDouble limbpts [][3], SpiceInt plateIDs [] )
limbpt_c	SpiceZpr.h	/^   void              limbpt_c ( ConstSpiceChar    * method,$/;"	signature:( ConstSpiceChar * method, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * fixref, ConstSpiceChar * abcorr, ConstSpiceChar * corloc, ConstSpiceChar * obsrvr, ConstSpiceDouble refvec[3], SpiceDouble rolstp, SpiceInt ncuts, SpiceDouble schstp, SpiceDouble soltol, SpiceInt maxn, SpiceInt npts [], SpiceDouble points[][3], SpiceDouble epochs[], SpiceDouble tangts[][3] )
llgrid_pl02	SpiceZpr.h	/^   void              llgrid_pl02 ( SpiceInt               handle,$/;"	signature:( SpiceInt handle, ConstSpiceDLADescr * dladsc, SpiceInt npoints, ConstSpiceDouble grid [][2], SpiceDouble spoints [][3], SpiceInt plateIDs [] )
lmpool_c	SpiceZpr.h	/^   void              lmpool_c ( const void        * cvals,$/;"	signature:( const void * cvals, SpiceInt lenvals, SpiceInt n )
lparse_c	SpiceZpr.h	/^   void              lparse_c ( ConstSpiceChar    * list,$/;"	signature:( ConstSpiceChar * list, ConstSpiceChar * delim, SpiceInt nmax, SpiceInt lenout, SpiceInt * n, void * items )
lparsm_c	SpiceZpr.h	/^   void              lparsm_c ( ConstSpiceChar    * list,$/;"	signature:( ConstSpiceChar * list, ConstSpiceChar * delims, SpiceInt nmax, SpiceInt lenout, SpiceInt * n, void * items )
lparss_c	SpiceZpr.h	/^   void              lparss_c ( ConstSpiceChar    * list,$/;"	signature:( ConstSpiceChar * list, ConstSpiceChar * delims, SpiceCell * set )
lspcn_c	SpiceZpr.h	/^   SpiceDouble       lspcn_c  ( ConstSpiceChar    * body,$/;"	signature:( ConstSpiceChar * body, SpiceDouble et, ConstSpiceChar * abcorr )
lstlec_c	SpiceZpr.h	/^   SpiceInt          lstlec_c ( ConstSpiceChar    * string,$/;"	signature:( ConstSpiceChar * string, SpiceInt n, SpiceInt lenvals, const void * array )
lstled_c	SpiceZpr.h	/^   SpiceInt          lstled_c ( SpiceDouble         x,$/;"	signature:( SpiceDouble x, SpiceInt n, ConstSpiceDouble * array )
lstlei_c	SpiceZpr.h	/^   SpiceInt          lstlei_c ( SpiceInt            x,$/;"	signature:( SpiceInt x, SpiceInt n, ConstSpiceInt * array )
lstltc_c	SpiceZpr.h	/^   SpiceInt          lstltc_c ( ConstSpiceChar    * string,$/;"	signature:( ConstSpiceChar * string, SpiceInt n, SpiceInt lenvals, const void * array )
lstltd_c	SpiceZpr.h	/^   SpiceInt          lstltd_c ( SpiceDouble         x,$/;"	signature:( SpiceDouble x, SpiceInt n, ConstSpiceDouble * array )
lstlti_c	SpiceZpr.h	/^   SpiceInt          lstlti_c ( SpiceInt            x,$/;"	signature:( SpiceInt x, SpiceInt n, ConstSpiceInt * array )
ltime_c	SpiceZpr.h	/^   void              ltime_c  ( SpiceDouble         etobs,$/;"	signature:( SpiceDouble etobs, SpiceInt obs, ConstSpiceChar * dir, SpiceInt targ, SpiceDouble * ettarg, SpiceDouble * elapsd )
lx4dec_c	SpiceZpr.h	/^   void              lx4dec_c ( ConstSpiceChar    * string,$/;"	signature:( ConstSpiceChar * string, SpiceInt first, SpiceInt * last, SpiceInt * nchar )
lx4num_c	SpiceZpr.h	/^   void              lx4num_c ( ConstSpiceChar    * string,$/;"	signature:( ConstSpiceChar * string, SpiceInt first, SpiceInt * last, SpiceInt * nchar )
lx4sgn_c	SpiceZpr.h	/^   void              lx4sgn_c ( ConstSpiceChar    * string,$/;"	signature:( ConstSpiceChar * string, SpiceInt first, SpiceInt * last, SpiceInt * nchar )
lx4uns_c	SpiceZpr.h	/^   void              lx4uns_c ( ConstSpiceChar    * string,$/;"	signature:( ConstSpiceChar * string, SpiceInt first, SpiceInt * last, SpiceInt * nchar )
lxqstr_c	SpiceZpr.h	/^   void              lxqstr_c ( ConstSpiceChar    * string,$/;"	signature:( ConstSpiceChar * string, SpiceChar qchar, SpiceInt first, SpiceInt * last, SpiceInt * nchar )
m2eul_c	SpiceZpr.h	/^   void              m2eul_c  ( ConstSpiceDouble    r[3][3],$/;"	signature:( ConstSpiceDouble r[3][3], SpiceInt axis3, SpiceInt axis2, SpiceInt axis1, SpiceDouble * angle3, SpiceDouble * angle2, SpiceDouble * angle1 )
m2q_c	SpiceZpr.h	/^   void              m2q_c    ( ConstSpiceDouble    r[3][3],$/;"	signature:( ConstSpiceDouble r[3][3], SpiceDouble q[4] )
matchi_c	SpiceZpr.h	/^   SpiceBoolean      matchi_c ( ConstSpiceChar    * string,$/;"	signature:( ConstSpiceChar * string, ConstSpiceChar * templ, SpiceChar wstr, SpiceChar wchr )
matchw_c	SpiceZpr.h	/^   SpiceBoolean      matchw_c ( ConstSpiceChar    * string,$/;"	signature:( ConstSpiceChar * string, ConstSpiceChar * templ, SpiceChar wstr, SpiceChar wchr )
maxd_c	SpiceZpr.h	/^   SpiceDouble       maxd_c  ( SpiceInt             n,$/;"	signature:( SpiceInt n, ... )
maxi_c	SpiceZpr.h	/^   SpiceInt          maxi_c  ( SpiceInt             n,$/;"	signature:( SpiceInt n, ... )
mequ_c	SpiceZpr.h	/^   void              mequ_c   ( ConstSpiceDouble    m1  [3][3],$/;"	signature:( ConstSpiceDouble m1 [3][3], SpiceDouble mout[3][3] )
mequg_c	SpiceZpr.h	/^   void              mequg_c  ( const void        * m1,$/;"	signature:( const void * m1, SpiceInt nr, SpiceInt nc, void * mout )
mind_c	SpiceZpr.h	/^   SpiceDouble       mind_c   ( SpiceInt            n,$/;"	signature:( SpiceInt n, ... )
mini_c	SpiceZpr.h	/^   SpiceInt          mini_c   ( SpiceInt            n,$/;"	signature:( SpiceInt n, ... )
moved_	SpiceZpr.h	/^   int               moved_   ( SpiceDouble       * arrfrm,$/;"	signature:( SpiceDouble * arrfrm, SpiceInt * ndim, SpiceDouble * arrto )
mtxm_c	SpiceZpr.h	/^   void              mtxm_c   ( ConstSpiceDouble    m1  [3][3],$/;"	signature:( ConstSpiceDouble m1 [3][3], ConstSpiceDouble m2 [3][3], SpiceDouble mout[3][3] )
mtxmg_c	SpiceZpr.h	/^   void              mtxmg_c  ( const void        * m1,$/;"	signature:( const void * m1, const void * m2, SpiceInt row1, SpiceInt col1, SpiceInt col2, void * mout )
mtxv_c	SpiceZpr.h	/^   void              mtxv_c   ( ConstSpiceDouble    m1  [3][3],$/;"	signature:( ConstSpiceDouble m1 [3][3], ConstSpiceDouble vin [3], SpiceDouble vout[3] )
mtxvg_c	SpiceZpr.h	/^   void              mtxvg_c  ( const void        * m1,$/;"	signature:( const void * m1, const void * v2, SpiceInt ncol1, SpiceInt nr1r2, void * vout )
mxm_c	SpiceZpr.h	/^   void              mxm_c    ( ConstSpiceDouble    m1  [3][3],$/;"	signature:( ConstSpiceDouble m1 [3][3], ConstSpiceDouble m2 [3][3], SpiceDouble mout[3][3] )
mxmg_c	SpiceZpr.h	/^   void              mxmg_c   ( const void        * m1,$/;"	signature:( const void * m1, const void * m2, SpiceInt row1, SpiceInt col1, SpiceInt col2, void * mout )
mxmt_c	SpiceZpr.h	/^   void              mxmt_c   ( ConstSpiceDouble    m1  [3][3],$/;"	signature:( ConstSpiceDouble m1 [3][3], ConstSpiceDouble m2 [3][3], SpiceDouble mout[3][3] )
mxmtg_c	SpiceZpr.h	/^   void              mxmtg_c  ( const void        * m1,$/;"	signature:( const void * m1, const void * m2, SpiceInt nrow1, SpiceInt nc1c2, SpiceInt nrow2, void * mout )
mxv_c	SpiceZpr.h	/^   void              mxv_c    ( ConstSpiceDouble    m1[3][3],$/;"	signature:( ConstSpiceDouble m1[3][3], ConstSpiceDouble vin[3], SpiceDouble vout[3] )
mxvg_c	SpiceZpr.h	/^   void              mxvg_c   ( const void        * m1,$/;"	signature:( const void * m1, const void * v2, SpiceInt nrow1, SpiceInt nc1r2, void * vout )
namfrm_c	SpiceZpr.h	/^   void              namfrm_c ( ConstSpiceChar    * frname,$/;"	signature:( ConstSpiceChar * frname, SpiceInt * frcode )
ncpos_c	SpiceZpr.h	/^   SpiceInt          ncpos_c  ( ConstSpiceChar    * str,$/;"	signature:( ConstSpiceChar * str, ConstSpiceChar * chars, SpiceInt start )
ncposr_c	SpiceZpr.h	/^   SpiceInt          ncposr_c ( ConstSpiceChar    * str,$/;"	signature:( ConstSpiceChar * str, ConstSpiceChar * chars, SpiceInt start )
nearpt_c	SpiceZpr.h	/^   void              nearpt_c ( ConstSpiceDouble    positn[3],$/;"	signature:( ConstSpiceDouble positn[3], SpiceDouble a, SpiceDouble b, SpiceDouble c, SpiceDouble npoint[3], SpiceDouble * alt )
npedln_c	SpiceZpr.h	/^   void              npedln_c ( SpiceDouble         a,$/;"	signature:( SpiceDouble a, SpiceDouble b, SpiceDouble c, ConstSpiceDouble linept[3], ConstSpiceDouble linedr[3], SpiceDouble pnear[3], SpiceDouble * dist )
npelpt_c	SpiceZpr.h	/^   void              npelpt_c ( ConstSpiceDouble    point[3],$/;"	signature:( ConstSpiceDouble point[3], ConstSpiceEllipse * ellips, SpiceDouble pnear[3], SpiceDouble * dist )
nplnpt_c	SpiceZpr.h	/^   void              nplnpt_c ( ConstSpiceDouble    linpt  [3],$/;"	signature:( ConstSpiceDouble linpt [3], ConstSpiceDouble lindir [3], ConstSpiceDouble point [3], SpiceDouble pnear [3], SpiceDouble * dist )
nvc2pl_c	SpiceZpr.h	/^   void              nvc2pl_c ( ConstSpiceDouble    normal[3],$/;"	signature:( ConstSpiceDouble normal[3], SpiceDouble constant, SpicePlane * plane )
nvp2pl_c	SpiceZpr.h	/^   void              nvp2pl_c ( ConstSpiceDouble    normal[3],$/;"	signature:( ConstSpiceDouble normal[3], ConstSpiceDouble point[3], SpicePlane * plane )
occult_c	SpiceZpr.h	/^   void              occult_c ( ConstSpiceChar    * target1,$/;"	signature:( ConstSpiceChar * target1, ConstSpiceChar * shape1, ConstSpiceChar * frame1, ConstSpiceChar * target2, ConstSpiceChar * shape2, ConstSpiceChar * frame2, ConstSpiceChar * abcorr, ConstSpiceChar * observer, SpiceDouble time, SpiceInt * occult_code )
ordc_c	SpiceZpr.h	/^   SpiceInt          ordc_c   ( ConstSpiceChar     * item,$/;"	signature:( ConstSpiceChar * item, SpiceCell * set )
ordd_c	SpiceZpr.h	/^   SpiceInt          ordd_c   ( SpiceDouble          item,$/;"	signature:( SpiceDouble item, SpiceCell * set )
orderc_c	SpiceZpr.h	/^   void              orderc_c ( SpiceInt            lenvals,$/;"	signature:( SpiceInt lenvals, const void * array, SpiceInt ndim, SpiceInt * iorder )
orderd_c	SpiceZpr.h	/^   void              orderd_c ( ConstSpiceDouble  * array,$/;"	signature:( ConstSpiceDouble * array, SpiceInt ndim, SpiceInt * iorder )
orderi_c	SpiceZpr.h	/^   void              orderi_c ( ConstSpiceInt     * array,$/;"	signature:( ConstSpiceInt * array, SpiceInt ndim, SpiceInt * iorder )
ordi_c	SpiceZpr.h	/^   SpiceInt          ordi_c   ( SpiceInt             item,$/;"	signature:( SpiceInt item, SpiceCell * set )
oscelt_c	SpiceZpr.h	/^   void              oscelt_c ( ConstSpiceDouble    state[6],$/;"	signature:( ConstSpiceDouble state[6], SpiceDouble et , SpiceDouble mu , SpiceDouble elts[8] )
oscltx_c	SpiceZpr.h	/^   void              oscltx_c ( ConstSpiceDouble    state[6],$/;"	signature:( ConstSpiceDouble state[6], SpiceDouble et , SpiceDouble mu , SpiceDouble elts[SPICE_OSCLTX_NELTS] )
pckcls_c	SpiceZpr.h	/^   void              pckcls_c ( SpiceInt            handle );$/;"	signature:( SpiceInt handle )
pckcov_c	SpiceZpr.h	/^   void              pckcov_c ( ConstSpiceChar    * pck,$/;"	signature:( ConstSpiceChar * pck, SpiceInt idcode, SpiceCell * cover )
pckfrm_c	SpiceZpr.h	/^   void              pckfrm_c ( ConstSpiceChar    * pck,$/;"	signature:( ConstSpiceChar * pck, SpiceCell * ids )
pcklof_c	SpiceZpr.h	/^   void              pcklof_c ( ConstSpiceChar    * fname,$/;"	signature:( ConstSpiceChar * fname, SpiceInt * handle )
pckopn_c	SpiceZpr.h	/^   void              pckopn_c ( ConstSpiceChar    * name,$/;"	signature:( ConstSpiceChar * name, ConstSpiceChar * ifname, SpiceInt ncomch, SpiceInt * handle )
pckuof_c	SpiceZpr.h	/^   void              pckuof_c ( SpiceInt            handle );$/;"	signature:( SpiceInt handle )
pckw02_c	SpiceZpr.h	/^   void              pckw02_c ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, SpiceInt clssid, ConstSpiceChar * frame, SpiceDouble first, SpiceDouble last, ConstSpiceChar * segid, SpiceDouble intlen, SpiceInt n, SpiceInt polydg, SpiceDouble cdata [], SpiceDouble btime )
pcpool_c	SpiceZpr.h	/^   void              pcpool_c ( ConstSpiceChar   * name,$/;"	signature:( ConstSpiceChar * name, SpiceInt n, SpiceInt lenvals, const void * cvals )
pdpool_c	SpiceZpr.h	/^   void              pdpool_c ( ConstSpiceChar    * name,$/;"	signature:( ConstSpiceChar * name, SpiceInt n, ConstSpiceDouble * dvals )
pgrrec_c	SpiceZpr.h	/^   void              pgrrec_c ( ConstSpiceChar    * body,$/;"	signature:( ConstSpiceChar * body, SpiceDouble lon, SpiceDouble lat, SpiceDouble alt, SpiceDouble re, SpiceDouble f, SpiceDouble rectan[3] )
phaseq_c	SpiceZpr.h	/^   SpiceDouble       phaseq_c ( SpiceDouble       et,$/;"	signature:( SpiceDouble et, ConstSpiceChar * target, ConstSpiceChar * illumn, ConstSpiceChar * obsrvr, ConstSpiceChar * abcorr )
pi_c	SpiceZpr.h	/^   SpiceDouble       pi_c     ( void );$/;"	signature:( void )
pipool_c	SpiceZpr.h	/^   void              pipool_c ( ConstSpiceChar    * name,$/;"	signature:( ConstSpiceChar * name, SpiceInt n, ConstSpiceInt * ivals )
pjelpl_c	SpiceZpr.h	/^   void              pjelpl_c ( ConstSpiceEllipse * elin,$/;"	signature:( ConstSpiceEllipse * elin, ConstSpicePlane * plane, SpiceEllipse * elout )
pl2nvc_c	SpiceZpr.h	/^   void              pl2nvc_c ( ConstSpicePlane   * plane,$/;"	signature:( ConstSpicePlane * plane, SpiceDouble normal[3], SpiceDouble * constant )
pl2nvp_c	SpiceZpr.h	/^   void              pl2nvp_c ( ConstSpicePlane   * plane,$/;"	signature:( ConstSpicePlane * plane, SpiceDouble normal[3], SpiceDouble point[3] )
pl2psv_c	SpiceZpr.h	/^   void              pl2psv_c ( ConstSpicePlane   * plane,$/;"	signature:( ConstSpicePlane * plane, SpiceDouble point[3], SpiceDouble span1[3], SpiceDouble span2[3] )
pltar_c	SpiceZpr.h	/^   SpiceDouble       pltar_c  ( SpiceInt            nv,$/;"	signature:( SpiceInt nv, ConstSpiceDouble vrtces[][3], SpiceInt np, ConstSpiceInt plates[][3] )
pltexp_c	SpiceZpr.h	/^   void              pltexp_c ( ConstSpiceDouble    iverts[3][3],$/;"	signature:( ConstSpiceDouble iverts[3][3], SpiceDouble delta, SpiceDouble overts[3][3] )
pltnp_c	SpiceZpr.h	/^   void              pltnp_c  ( ConstSpiceDouble    point[3],$/;"	signature:( ConstSpiceDouble point[3], ConstSpiceDouble v1 [3], ConstSpiceDouble v2 [3], ConstSpiceDouble v3 [3], SpiceDouble pnear[3], SpiceDouble * dist )
pltnrm_c	SpiceZpr.h	/^   void              pltnrm_c ( ConstSpiceDouble   v1[3],$/;"	signature:( ConstSpiceDouble v1[3], ConstSpiceDouble v2[3], ConstSpiceDouble v3[3], SpiceDouble normal[3] )
pltvol_c	SpiceZpr.h	/^   SpiceDouble       pltvol_c ( SpiceInt           nv,$/;"	signature:( SpiceInt nv, ConstSpiceDouble vrtces[][3], SpiceInt np, ConstSpiceInt plates[][3] )
polyds_c	SpiceZpr.h	/^   void              polyds_c ( ConstSpiceDouble    * coeffs,$/;"	signature:( ConstSpiceDouble * coeffs, SpiceInt deg, SpiceInt nderiv, SpiceDouble t, SpiceDouble * p )
pos_c	SpiceZpr.h	/^   SpiceInt          pos_c    ( ConstSpiceChar    * str,$/;"	signature:( ConstSpiceChar * str, ConstSpiceChar * substr, SpiceInt start )
posr_c	SpiceZpr.h	/^   SpiceInt          posr_c   ( ConstSpiceChar    * str,$/;"	signature:( ConstSpiceChar * str, ConstSpiceChar * substr, SpiceInt start )
prefix_c	SpiceZpr.h	/^   void              prefix_c ( ConstSpiceChar    * pref,$/;"	signature:( ConstSpiceChar * pref, SpiceInt spaces, SpiceInt lenout, SpiceChar * string )
prompt_c	SpiceZpr.h	/^   SpiceChar       * prompt_c ( ConstSpiceChar    * prmptStr,$/;"	signature:( ConstSpiceChar * prmptStr, SpiceInt lenout, SpiceChar * buffer )
prop2b_c	SpiceZpr.h	/^   void              prop2b_c ( SpiceDouble         gm,$/;"	signature:( SpiceDouble gm, ConstSpiceDouble pvinit[6], SpiceDouble dt, SpiceDouble pvprop[6] )
prsdp_c	SpiceZpr.h	/^   void              prsdp_c  ( ConstSpiceChar    * string,$/;"	signature:( ConstSpiceChar * string, SpiceDouble * dpval )
prsint_c	SpiceZpr.h	/^   void              prsint_c ( ConstSpiceChar    * string,$/;"	signature:( ConstSpiceChar * string, SpiceInt * intval )
psv2pl_c	SpiceZpr.h	/^   void              psv2pl_c ( ConstSpiceDouble    point[3],$/;"	signature:( ConstSpiceDouble point[3], ConstSpiceDouble span1[3], ConstSpiceDouble span2[3], SpicePlane * plane )
putcml_c	SpiceZpr.h	/^   void              putcml_c ( SpiceInt            argc ,$/;"	signature:( SpiceInt argc , SpiceChar ** argv )
pxform_c	SpiceZpr.h	/^   void              pxform_c ( ConstSpiceChar    * from,$/;"	signature:( ConstSpiceChar * from, ConstSpiceChar * to, SpiceDouble et, SpiceDouble rotate[3][3] )
pxfrm2_c	SpiceZpr.h	/^   void              pxfrm2_c ( ConstSpiceChar    * from,$/;"	signature:( ConstSpiceChar * from, ConstSpiceChar * to, SpiceDouble etfrom, SpiceDouble etto, SpiceDouble rotate[3][3] )
q2m_c	SpiceZpr.h	/^   void              q2m_c    ( ConstSpiceDouble    q[4],$/;"	signature:( ConstSpiceDouble q[4], SpiceDouble r[3][3] )
qcktrc_c	SpiceZpr.h	/^   void              qcktrc_c ( SpiceInt            tracelen,$/;"	signature:( SpiceInt tracelen, SpiceChar * trace )
qdq2av_c	SpiceZpr.h	/^   void              qdq2av_c ( ConstSpiceDouble    q[4],$/;"	signature:( ConstSpiceDouble q[4], ConstSpiceDouble dq[4], SpiceDouble av[3] )
qxq_c	SpiceZpr.h	/^   void              qxq_c    ( ConstSpiceDouble    q1[4],$/;"	signature:( ConstSpiceDouble q1[4], ConstSpiceDouble q2[4], SpiceDouble qout[4] )
radrec_c	SpiceZpr.h	/^   void              radrec_c ( SpiceDouble         range,$/;"	signature:( SpiceDouble range, SpiceDouble ra, SpiceDouble dec, SpiceDouble rectan[3] )
rav2xf_c	SpiceZpr.h	/^   void              rav2xf_c ( ConstSpiceDouble     rot   [3][3],$/;"	signature:( ConstSpiceDouble rot [3][3], ConstSpiceDouble av [3], SpiceDouble xform [6][6] )
raxisa_c	SpiceZpr.h	/^   void              raxisa_c ( ConstSpiceDouble     matrix[3][3],$/;"	signature:( ConstSpiceDouble matrix[3][3], SpiceDouble axis [3], SpiceDouble * angle )
rdtext_c	SpiceZpr.h	/^   void              rdtext_c ( ConstSpiceChar     * file,$/;"	signature:( ConstSpiceChar * file, SpiceInt lenout, SpiceChar * line, SpiceBoolean * eof )
reccyl_c	SpiceZpr.h	/^   void              reccyl_c ( ConstSpiceDouble    rectan[3],$/;"	signature:( ConstSpiceDouble rectan[3], SpiceDouble * r, SpiceDouble * lon, SpiceDouble * z )
recgeo_c	SpiceZpr.h	/^   void              recgeo_c ( ConstSpiceDouble    rectan[3],$/;"	signature:( ConstSpiceDouble rectan[3], SpiceDouble re, SpiceDouble f, SpiceDouble * lon, SpiceDouble * lat, SpiceDouble * alt )
reclat_c	SpiceZpr.h	/^   void              reclat_c ( ConstSpiceDouble    rectan[3],$/;"	signature:( ConstSpiceDouble rectan[3], SpiceDouble * radius, SpiceDouble * longitude, SpiceDouble * latitude )
recpgr_c	SpiceZpr.h	/^   void              recpgr_c ( ConstSpiceChar    * body,$/;"	signature:( ConstSpiceChar * body, SpiceDouble rectan[3], SpiceDouble re, SpiceDouble f, SpiceDouble * lon, SpiceDouble * lat, SpiceDouble * alt )
recrad_c	SpiceZpr.h	/^   void              recrad_c ( ConstSpiceDouble    rectan[3],$/;"	signature:( ConstSpiceDouble rectan[3], SpiceDouble * radius, SpiceDouble * ra, SpiceDouble * dec )
recsph_c	SpiceZpr.h	/^   void              recsph_c ( ConstSpiceDouble    rectan[3],$/;"	signature:( ConstSpiceDouble rectan[3], SpiceDouble * r, SpiceDouble * colat, SpiceDouble * lon )
removc_c	SpiceZpr.h	/^   void              removc_c ( ConstSpiceChar     * item,$/;"	signature:( ConstSpiceChar * item, SpiceCell * set )
removd_c	SpiceZpr.h	/^   void              removd_c ( SpiceDouble          item,$/;"	signature:( SpiceDouble item, SpiceCell * set )
removi_c	SpiceZpr.h	/^   void              removi_c ( SpiceInt             item,$/;"	signature:( SpiceInt item, SpiceCell * set )
reordc_c	SpiceZpr.h	/^   void              reordc_c ( ConstSpiceInt     * iorder,$/;"	signature:( ConstSpiceInt * iorder, SpiceInt ndim, SpiceInt lenvals, void * array )
reordd_c	SpiceZpr.h	/^   void              reordd_c ( ConstSpiceInt     * iorder,$/;"	signature:( ConstSpiceInt * iorder, SpiceInt ndim, SpiceDouble * array )
reordi_c	SpiceZpr.h	/^   void              reordi_c ( ConstSpiceInt     * iorder,$/;"	signature:( ConstSpiceInt * iorder, SpiceInt ndim, SpiceInt * array )
reordl_c	SpiceZpr.h	/^   void              reordl_c ( ConstSpiceInt     * iorder,$/;"	signature:( ConstSpiceInt * iorder, SpiceInt ndim, SpiceBoolean * array )
repmc_c	SpiceZpr.h	/^   void              repmc_c  ( ConstSpiceChar     * in,$/;"	signature:( ConstSpiceChar * in, ConstSpiceChar * marker, ConstSpiceChar * value, SpiceInt lenout, SpiceChar * out )
repmct_c	SpiceZpr.h	/^   void              repmct_c ( ConstSpiceChar     * in,$/;"	signature:( ConstSpiceChar * in, ConstSpiceChar * marker, SpiceInt value, SpiceChar strCase, SpiceInt lenout, SpiceChar * out )
repmd_c	SpiceZpr.h	/^   void              repmd_c  ( ConstSpiceChar     * in,$/;"	signature:( ConstSpiceChar * in, ConstSpiceChar * marker, SpiceDouble value, SpiceInt sigdig, SpiceInt lenout, SpiceChar * out )
repmf_c	SpiceZpr.h	/^   void              repmf_c  ( ConstSpiceChar     * in,$/;"	signature:( ConstSpiceChar * in, ConstSpiceChar * marker, SpiceDouble value, SpiceInt sigdig, SpiceChar format, SpiceInt lenout, SpiceChar * out )
repmi_c	SpiceZpr.h	/^   void              repmi_c  ( ConstSpiceChar     * in,$/;"	signature:( ConstSpiceChar * in, ConstSpiceChar * marker, SpiceInt value, SpiceInt lenout, SpiceChar * out )
repmot_c	SpiceZpr.h	/^   void              repmot_c ( ConstSpiceChar     * in,$/;"	signature:( ConstSpiceChar * in, ConstSpiceChar * marker, SpiceInt value, SpiceChar strCase, SpiceInt lenout, SpiceChar * out )
reset_c	SpiceZpr.h	/^   void              reset_c  ( void );$/;"	signature:( void )
return_c	SpiceZpr.h	/^   SpiceBoolean      return_c ( void );$/;"	signature:( void )
rotate_c	SpiceZpr.h	/^   void              rotate_c ( SpiceDouble         angle,$/;"	signature:( SpiceDouble angle, SpiceInt iaxis, SpiceDouble mout[3][3] )
rotmat_c	SpiceZpr.h	/^   void              rotmat_c ( ConstSpiceDouble    m1[3][3],$/;"	signature:( ConstSpiceDouble m1[3][3], SpiceDouble angle, SpiceInt iaxis, SpiceDouble mout[3][3] )
rotvec_c	SpiceZpr.h	/^   void              rotvec_c ( ConstSpiceDouble    v1[3],$/;"	signature:( ConstSpiceDouble v1[3], SpiceDouble angle, SpiceInt iaxis, SpiceDouble vout[3] )
rpd_c	SpiceZpr.h	/^   SpiceDouble       rpd_c    ( void );$/;"	signature:( void )
rquad_c	SpiceZpr.h	/^   void              rquad_c  ( SpiceDouble         a,$/;"	signature:( SpiceDouble a, SpiceDouble b, SpiceDouble c, SpiceDouble root1[2], SpiceDouble root2[2] )
saelgv_c	SpiceZpr.h	/^   void              saelgv_c ( ConstSpiceDouble    vec1  [3],$/;"	signature:( ConstSpiceDouble vec1 [3], ConstSpiceDouble vec2 [3], SpiceDouble smajor[3], SpiceDouble sminor[3] )
scard_c	SpiceZpr.h	/^   void              scard_c (  SpiceInt            card,$/;"	signature:( SpiceInt card, SpiceCell * cell )
scdecd_c	SpiceZpr.h	/^   void              scdecd_c ( SpiceInt            sc,$/;"	signature:( SpiceInt sc, SpiceDouble sclkdp, SpiceInt sclklen, SpiceChar * sclkch )
sce2c_c	SpiceZpr.h	/^   void              sce2c_c  ( SpiceInt            sc,$/;"	signature:( SpiceInt sc, SpiceDouble et, SpiceDouble * sclkdp )
sce2s_c	SpiceZpr.h	/^   void              sce2s_c  ( SpiceInt            sc,$/;"	signature:( SpiceInt sc, SpiceDouble et, SpiceInt sclklen, SpiceChar * sclkch )
sce2t_c	SpiceZpr.h	/^   void              sce2t_c  ( SpiceInt            sc,$/;"	signature:( SpiceInt sc, SpiceDouble et, SpiceDouble * sclkdp )
scencd_c	SpiceZpr.h	/^   void              scencd_c ( SpiceInt            sc,$/;"	signature:( SpiceInt sc, ConstSpiceChar * sclkch, SpiceDouble * sclkdp )
scfmt_c	SpiceZpr.h	/^   void              scfmt_c  ( SpiceInt            sc,$/;"	signature:( SpiceInt sc, SpiceDouble ticks, SpiceInt clkstrlen, SpiceChar * clkstr )
scpart_c	SpiceZpr.h	/^   void              scpart_c ( SpiceInt            sc,$/;"	signature:( SpiceInt sc, SpiceInt * nparts, SpiceDouble * pstart, SpiceDouble * pstop )
scs2e_c	SpiceZpr.h	/^   void              scs2e_c  ( SpiceInt            sc,$/;"	signature:( SpiceInt sc, ConstSpiceChar * sclkch, SpiceDouble * et )
sct2e_c	SpiceZpr.h	/^   void              sct2e_c  ( SpiceInt            sc,$/;"	signature:( SpiceInt sc, SpiceDouble sclkdp, SpiceDouble * et )
sctiks_c	SpiceZpr.h	/^   void              sctiks_c ( SpiceInt            sc,$/;"	signature:( SpiceInt sc, ConstSpiceChar * clkstr, SpiceDouble * ticks )
sdiff_c	SpiceZpr.h	/^   void              sdiff_c  ( SpiceCell         * a,$/;"	signature:( SpiceCell * a, SpiceCell * b, SpiceCell * c )
set_c	SpiceZpr.h	/^   SpiceBoolean      set_c    ( SpiceCell          * a,$/;"	signature:( SpiceCell * a, ConstSpiceChar * op, SpiceCell * b )
setmsg_c	SpiceZpr.h	/^   void              setmsg_c ( ConstSpiceChar    * msg );$/;"	signature:( ConstSpiceChar * msg )
shellc_c	SpiceZpr.h	/^   void              shellc_c ( SpiceInt            ndim,$/;"	signature:( SpiceInt ndim, SpiceInt lenvals, void * array )
shelld_c	SpiceZpr.h	/^   void              shelld_c ( SpiceInt            ndim,$/;"	signature:( SpiceInt ndim, SpiceDouble * array )
shelli_c	SpiceZpr.h	/^   void              shelli_c ( SpiceInt            ndim,$/;"	signature:( SpiceInt ndim, SpiceInt * array )
sigerr_c	SpiceZpr.h	/^   void              sigerr_c ( ConstSpiceChar    * message );$/;"	signature:( ConstSpiceChar * message )
sincpt_c	SpiceZpr.h	/^   void              sincpt_c ( ConstSpiceChar    * method,$/;"	signature:( ConstSpiceChar * method, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * fixref, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, ConstSpiceChar * dref, ConstSpiceDouble dvec [3], SpiceDouble spoint [3], SpiceDouble * trgepc, SpiceDouble srfvec [3], SpiceBoolean * found )
size_c	SpiceZpr.h	/^   SpiceInt          size_c   ( SpiceCell         * size );$/;"	signature:( SpiceCell * size )
spd_c	SpiceZpr.h	/^   SpiceDouble       spd_c    ( void );$/;"	signature:( void )
sphcyl_c	SpiceZpr.h	/^   void              sphcyl_c ( SpiceDouble         radius,$/;"	signature:( SpiceDouble radius, SpiceDouble colat, SpiceDouble slon, SpiceDouble * r, SpiceDouble * lon, SpiceDouble * z )
sphlat_c	SpiceZpr.h	/^   void              sphlat_c ( SpiceDouble         r,$/;"	signature:( SpiceDouble r, SpiceDouble colat, SpiceDouble lons, SpiceDouble * radius, SpiceDouble * lon, SpiceDouble * lat )
sphrec_c	SpiceZpr.h	/^   void              sphrec_c ( SpiceDouble         r,$/;"	signature:( SpiceDouble r, SpiceDouble colat, SpiceDouble lon, SpiceDouble rectan[3] )
spk14a_c	SpiceZpr.h	/^   void              spk14a_c ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, SpiceInt ncsets, ConstSpiceDouble coeffs [], ConstSpiceDouble epochs [] )
spk14b_c	SpiceZpr.h	/^   void              spk14b_c ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, ConstSpiceChar * segid, SpiceInt body, SpiceInt center, ConstSpiceChar * frame, SpiceDouble first, SpiceDouble last, SpiceInt chbdeg )
spk14e_c	SpiceZpr.h	/^   void              spk14e_c ( SpiceInt            handle );$/;"	signature:( SpiceInt handle )
spkacs_c	SpiceZpr.h	/^   void              spkacs_c ( SpiceInt            targ,$/;"	signature:( SpiceInt targ, SpiceDouble et, ConstSpiceChar * ref, ConstSpiceChar * abcorr, SpiceInt obs, SpiceDouble starg[6], SpiceDouble * lt, SpiceDouble * dlt )
spkapo_c	SpiceZpr.h	/^   void              spkapo_c ( SpiceInt            targ,$/;"	signature:( SpiceInt targ, SpiceDouble et, ConstSpiceChar * ref, ConstSpiceDouble sobs[6], ConstSpiceChar * abcorr, SpiceDouble ptarg[3], SpiceDouble * lt )
spkapp_c	SpiceZpr.h	/^   void              spkapp_c ( SpiceInt            targ,$/;"	signature:( SpiceInt targ, SpiceDouble et, ConstSpiceChar * ref, ConstSpiceDouble sobs [6], ConstSpiceChar * abcorr, SpiceDouble starg [6], SpiceDouble * lt )
spkaps_c	SpiceZpr.h	/^   void              spkaps_c ( SpiceInt            targ,$/;"	signature:( SpiceInt targ, SpiceDouble et, ConstSpiceChar * ref, ConstSpiceChar * abcorr, ConstSpiceDouble stobs[6], ConstSpiceDouble accobs[6], SpiceDouble starg[6], SpiceDouble * lt, SpiceDouble * dlt )
spkcls_c	SpiceZpr.h	/^   void              spkcls_c ( SpiceInt            handle );$/;"	signature:( SpiceInt handle )
spkcov_c	SpiceZpr.h	/^   void              spkcov_c ( ConstSpiceChar    * spk,$/;"	signature:( ConstSpiceChar * spk, SpiceInt idcode, SpiceCell * cover )
spkcpo_c	SpiceZpr.h	/^   void              spkcpo_c ( ConstSpiceChar    * target,$/;"	signature:( ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * outref, ConstSpiceChar * refloc, ConstSpiceChar * abcorr, ConstSpiceDouble obssta [3], ConstSpiceChar * obsctr, ConstSpiceChar * obsref, SpiceDouble state [6], SpiceDouble * lt )
spkcpt_c	SpiceZpr.h	/^   void              spkcpt_c ( ConstSpiceDouble    trgpos [3],$/;"	signature:( ConstSpiceDouble trgpos [3], ConstSpiceChar * trgctr, ConstSpiceChar * trgref, SpiceDouble et, ConstSpiceChar * outref, ConstSpiceChar * refloc, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, SpiceDouble state [6], SpiceDouble * lt )
spkcvo_c	SpiceZpr.h	/^   void              spkcvo_c ( ConstSpiceChar    * target,$/;"	signature:( ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * outref, ConstSpiceChar * refloc, ConstSpiceChar * abcorr, ConstSpiceDouble obssta [6], SpiceDouble obsepc, ConstSpiceChar * obsctr, ConstSpiceChar * obsref, SpiceDouble state [6], SpiceDouble * lt )
spkcvt_c	SpiceZpr.h	/^   void              spkcvt_c ( ConstSpiceDouble    trgsta [6],$/;"	signature:( ConstSpiceDouble trgsta [6], SpiceDouble trgepc, ConstSpiceChar * trgctr, ConstSpiceChar * trgref, SpiceDouble et, ConstSpiceChar * outref, ConstSpiceChar * refloc, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, SpiceDouble state [6], SpiceDouble * lt )
spkez_c	SpiceZpr.h	/^   void              spkez_c  ( SpiceInt            target,$/;"	signature:( SpiceInt target, SpiceDouble epoch, ConstSpiceChar * frame, ConstSpiceChar * abcorr, SpiceInt observer, SpiceDouble state[6], SpiceDouble * lt )
spkezp_c	SpiceZpr.h	/^   void              spkezp_c ( SpiceInt            targ,$/;"	signature:( SpiceInt targ, SpiceDouble et, ConstSpiceChar * ref, ConstSpiceChar * abcorr, SpiceInt obs, SpiceDouble ptarg[3], SpiceDouble * lt )
spkezr_c	SpiceZpr.h	/^   void              spkezr_c ( ConstSpiceChar    * target,$/;"	signature:( ConstSpiceChar * target, SpiceDouble epoch, ConstSpiceChar * frame, ConstSpiceChar * abcorr, ConstSpiceChar * observer, SpiceDouble state[6], SpiceDouble * lt )
spkgeo_c	SpiceZpr.h	/^   void              spkgeo_c ( SpiceInt            targ,$/;"	signature:( SpiceInt targ, SpiceDouble et, ConstSpiceChar * ref, SpiceInt obs, SpiceDouble state[6], SpiceDouble * lt )
spkgps_c	SpiceZpr.h	/^   void              spkgps_c ( SpiceInt            targ,$/;"	signature:( SpiceInt targ, SpiceDouble et, ConstSpiceChar * ref, SpiceInt obs, SpiceDouble pos[3], SpiceDouble * lt )
spklef_c	SpiceZpr.h	/^   void              spklef_c ( ConstSpiceChar    * filename,$/;"	signature:( ConstSpiceChar * filename, SpiceInt * handle )
spkltc_c	SpiceZpr.h	/^   void              spkltc_c ( SpiceInt            targ,$/;"	signature:( SpiceInt targ, SpiceDouble et, ConstSpiceChar * ref, ConstSpiceChar * abcorr, ConstSpiceDouble stobs[6], SpiceDouble starg[6], SpiceDouble * lt, SpiceDouble * dlt )
spkobj_c	SpiceZpr.h	/^   void              spkobj_c ( ConstSpiceChar    * spk,$/;"	signature:( ConstSpiceChar * spk, SpiceCell * ids )
spkopa_c	SpiceZpr.h	/^   void              spkopa_c ( ConstSpiceChar    * file,$/;"	signature:( ConstSpiceChar * file, SpiceInt * handle )
spkopn_c	SpiceZpr.h	/^   void              spkopn_c ( ConstSpiceChar    * name,$/;"	signature:( ConstSpiceChar * name, ConstSpiceChar * ifname, SpiceInt ncomch, SpiceInt * handle )
spkpds_c	SpiceZpr.h	/^   void              spkpds_c ( SpiceInt            body,$/;"	signature:( SpiceInt body, SpiceInt center, ConstSpiceChar * frame, SpiceInt type, SpiceDouble first, SpiceDouble last, SpiceDouble descr[5] )
spkpos_c	SpiceZpr.h	/^   void              spkpos_c ( ConstSpiceChar    * targ,$/;"	signature:( ConstSpiceChar * targ, SpiceDouble et, ConstSpiceChar * ref, ConstSpiceChar * abcorr, ConstSpiceChar * obs, SpiceDouble ptarg[3], SpiceDouble * lt )
spkpvn_c	SpiceZpr.h	/^   void              spkpvn_c ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, ConstSpiceDouble descr [5], SpiceDouble et, SpiceInt * ref, SpiceDouble state [6], SpiceInt * center )
spksfs_c	SpiceZpr.h	/^   void              spksfs_c ( SpiceInt            body,$/;"	signature:( SpiceInt body, SpiceDouble et, SpiceInt idlen, SpiceInt * handle, SpiceDouble descr [5], SpiceChar * ident, SpiceBoolean * found )
spkssb_c	SpiceZpr.h	/^   void              spkssb_c ( SpiceInt            targ,$/;"	signature:( SpiceInt targ, SpiceDouble et, ConstSpiceChar * ref, SpiceDouble starg[6] )
spksub_c	SpiceZpr.h	/^   void              spksub_c ( SpiceInt            handle,$/;"	signature:( SpiceInt handle, SpiceDouble descr[5], ConstSpiceChar * ident, SpiceDouble begin, SpiceDouble end, SpiceInt newh )
spkuds_c	SpiceZpr.h	/^   void              spkuds_c ( ConstSpiceDouble    descr [5],$/;"	signature:( ConstSpiceDouble descr [5], SpiceInt * body, SpiceInt * center, SpiceInt * frame, SpiceInt * type, SpiceDouble * first, SpiceDouble * last, SpiceInt * begin, SpiceInt * end )
spkuef_c	SpiceZpr.h	/^   void              spkuef_c ( SpiceInt             handle );$/;"	signature:( SpiceInt handle )
spkw02_c	SpiceZpr.h	/^   void              spkw02_c ( SpiceInt             handle,$/;"	signature:( SpiceInt handle, SpiceInt body, SpiceInt center, ConstSpiceChar * frame, SpiceDouble first, SpiceDouble last, ConstSpiceChar * segid, SpiceDouble intlen, SpiceInt n, SpiceInt polydg, ConstSpiceDouble cdata [], SpiceDouble btime )
spkw03_c	SpiceZpr.h	/^   void              spkw03_c ( SpiceInt             handle,$/;"	signature:( SpiceInt handle, SpiceInt body, SpiceInt center, ConstSpiceChar * frame, SpiceDouble first, SpiceDouble last, ConstSpiceChar * segid, SpiceDouble intlen, SpiceInt n, SpiceInt polydg, ConstSpiceDouble cdata [], SpiceDouble btime )
spkw05_c	SpiceZpr.h	/^   void              spkw05_c ( SpiceInt             handle,$/;"	signature:( SpiceInt handle, SpiceInt body, SpiceInt center, ConstSpiceChar * frame, SpiceDouble first, SpiceDouble last, ConstSpiceChar * segid, SpiceDouble gm, SpiceInt n, ConstSpiceDouble states [][6], ConstSpiceDouble epochs [] )
spkw08_c	SpiceZpr.h	/^   void              spkw08_c ( SpiceInt             handle,$/;"	signature:( SpiceInt handle, SpiceInt body, SpiceInt center, ConstSpiceChar * frame, SpiceDouble first, SpiceDouble last, ConstSpiceChar * segid, SpiceInt degree, SpiceInt n, ConstSpiceDouble states[][6], SpiceDouble epoch1, SpiceDouble step )
spkw09_c	SpiceZpr.h	/^   void              spkw09_c ( SpiceInt             handle,$/;"	signature:( SpiceInt handle, SpiceInt body, SpiceInt center, ConstSpiceChar * frame, SpiceDouble first, SpiceDouble last, ConstSpiceChar * segid, SpiceInt degree, SpiceInt n, ConstSpiceDouble states[][6], ConstSpiceDouble epochs[] )
spkw10_c	SpiceZpr.h	/^   void              spkw10_c ( SpiceInt             handle,$/;"	signature:( SpiceInt handle, SpiceInt body, SpiceInt center, ConstSpiceChar * frame, SpiceDouble first, SpiceDouble last, ConstSpiceChar * segid, ConstSpiceDouble consts [8], SpiceInt n, ConstSpiceDouble elems [], ConstSpiceDouble epochs [] )
spkw12_c	SpiceZpr.h	/^   void              spkw12_c ( SpiceInt             handle,$/;"	signature:( SpiceInt handle, SpiceInt body, SpiceInt center, ConstSpiceChar * frame, SpiceDouble first, SpiceDouble last, ConstSpiceChar * segid, SpiceInt degree, SpiceInt n, ConstSpiceDouble states[][6], SpiceDouble epoch0, SpiceDouble step )
spkw13_c	SpiceZpr.h	/^   void              spkw13_c ( SpiceInt             handle,$/;"	signature:( SpiceInt handle, SpiceInt body, SpiceInt center, ConstSpiceChar * frame, SpiceDouble first, SpiceDouble last, ConstSpiceChar * segid, SpiceInt degree, SpiceInt n, ConstSpiceDouble states[][6], ConstSpiceDouble epochs[] )
spkw15_c	SpiceZpr.h	/^   void              spkw15_c ( SpiceInt             handle,$/;"	signature:( SpiceInt handle, SpiceInt body, SpiceInt center, ConstSpiceChar * frame, SpiceDouble first, SpiceDouble last, ConstSpiceChar * segid, SpiceDouble epoch, ConstSpiceDouble tp [3], ConstSpiceDouble pa [3], SpiceDouble p, SpiceDouble ecc, SpiceDouble j2flg, ConstSpiceDouble pv [3], SpiceDouble gm, SpiceDouble j2, SpiceDouble radius )
spkw17_c	SpiceZpr.h	/^   void              spkw17_c ( SpiceInt             handle,$/;"	signature:( SpiceInt handle, SpiceInt body, SpiceInt center, ConstSpiceChar * frame, SpiceDouble first, SpiceDouble last, ConstSpiceChar * segid, SpiceDouble epoch, ConstSpiceDouble eqel [9], SpiceDouble rapol, SpiceDouble decpol )
spkw18_c	SpiceZpr.h	/^   void              spkw18_c ( SpiceInt             handle,$/;"	signature:( SpiceInt handle, SpiceSPK18Subtype subtyp, SpiceInt body, SpiceInt center, ConstSpiceChar * frame, SpiceDouble first, SpiceDouble last, ConstSpiceChar * segid, SpiceInt degree, SpiceInt n, const void * packts, ConstSpiceDouble epochs[] )
spkw20_c	SpiceZpr.h	/^   void             spkw20_c  ( SpiceInt             handle,$/;"	signature:( SpiceInt handle, SpiceInt body, SpiceInt center, ConstSpiceChar * frame, SpiceDouble first, SpiceDouble last, ConstSpiceChar * segid, SpiceDouble intlen, SpiceInt n, SpiceInt polydg, ConstSpiceDouble cdata[], SpiceDouble dscale, SpiceDouble tscale, SpiceDouble initjd, SpiceDouble initfr )
srfc2s_c	SpiceZpr.h	/^   void              srfc2s_c ( SpiceInt             code,$/;"	signature:( SpiceInt code, SpiceInt bodyid, SpiceInt srflen, SpiceChar * srfstr, SpiceBoolean * isname )
srfcss_c	SpiceZpr.h	/^   void              srfcss_c ( SpiceInt             code,$/;"	signature:( SpiceInt code, ConstSpiceChar * bodstr, SpiceInt srflen, SpiceChar * srfstr, SpiceBoolean * isname )
srfnrm_c	SpiceZpr.h	/^   void              srfnrm_c ( ConstSpiceChar     * method,$/;"	signature:( ConstSpiceChar * method, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * fixref, SpiceInt npts, ConstSpiceDouble srfpts[][3], SpiceDouble normls[][3] )
srfrec_c	SpiceZpr.h	/^   void              srfrec_c ( SpiceInt            body,$/;"	signature:( SpiceInt body, SpiceDouble lon, SpiceDouble lat, SpiceDouble rectan[3] )
srfs2c_c	SpiceZpr.h	/^   void              srfs2c_c ( ConstSpiceChar     * srfstr,$/;"	signature:( ConstSpiceChar * srfstr, ConstSpiceChar * bodstr, SpiceInt * code, SpiceBoolean * found )
srfscc_c	SpiceZpr.h	/^   void              srfscc_c ( ConstSpiceChar     * surfce,$/;"	signature:( ConstSpiceChar * surfce, SpiceInt bodyid, SpiceInt * surfid, SpiceBoolean * found )
srfxpt_c	SpiceZpr.h	/^   void              srfxpt_c ( ConstSpiceChar    * method,$/;"	signature:( ConstSpiceChar * method, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, ConstSpiceChar * dref, ConstSpiceDouble dvec [3], SpiceDouble spoint [3], SpiceDouble * dist, SpiceDouble * trgepc, SpiceDouble obspos [3], SpiceBoolean * found )
ssize_c	SpiceZpr.h	/^   void              ssize_c  ( SpiceInt             size,$/;"	signature:( SpiceInt size, SpiceCell * cell )
stelab_c	SpiceZpr.h	/^   void              stelab_c ( ConstSpiceDouble    pobj[3],$/;"	signature:( ConstSpiceDouble pobj[3], ConstSpiceDouble vobs[3], SpiceDouble appobj[3] )
stpool_c	SpiceZpr.h	/^   void              stpool_c ( ConstSpiceChar    * item,$/;"	signature:( ConstSpiceChar * item, SpiceInt nth, ConstSpiceChar * contin, SpiceInt lenout, SpiceChar * string, SpiceInt * size, SpiceBoolean * found )
str2et_c	SpiceZpr.h	/^   void              str2et_c ( ConstSpiceChar    * date,$/;"	signature:( ConstSpiceChar * date, SpiceDouble * et )
subpnt_c	SpiceZpr.h	/^   void              subpnt_c ( ConstSpiceChar    * method,$/;"	signature:( ConstSpiceChar * method, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * fixref, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, SpiceDouble spoint [3], SpiceDouble * trgepc, SpiceDouble srfvec [3] )
subpt_c	SpiceZpr.h	/^   void              subpt_c  ( ConstSpiceChar    * method,$/;"	signature:( ConstSpiceChar * method, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, SpiceDouble spoint [3], SpiceDouble * alt )
subpt_pl02	SpiceZpr.h	/^   void              subpt_pl02( SpiceInt               handle,$/;"	signature:( SpiceInt handle, ConstSpiceDLADescr * dladsc, ConstSpiceChar * method, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, SpiceDouble spoint [3], SpiceDouble * alt, SpiceInt * plateID )
subslr_c	SpiceZpr.h	/^   void              subslr_c ( ConstSpiceChar    * method,$/;"	signature:( ConstSpiceChar * method, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * fixref, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, SpiceDouble spoint [3], SpiceDouble * trgepc, SpiceDouble srfvec [3] )
subsol_c	SpiceZpr.h	/^   void              subsol_c ( ConstSpiceChar    * method,$/;"	signature:( ConstSpiceChar * method, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, SpiceDouble spoint[3] )
subsol_pl02	SpiceZpr.h	/^   void              subsol_pl02 ( SpiceInt               handle,$/;"	signature:( SpiceInt handle, ConstSpiceDLADescr * dladsc, ConstSpiceChar * method, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, SpiceDouble spoint [3], SpiceDouble * dist, SpiceInt * plateID )
sumad_c	SpiceZpr.h	/^   SpiceDouble       sumad_c  ( ConstSpiceDouble    array[],$/;"	signature:( ConstSpiceDouble array[], SpiceInt n )
sumai_c	SpiceZpr.h	/^   SpiceInt          sumai_c  ( ConstSpiceInt       array[],$/;"	signature:( ConstSpiceInt array[], SpiceInt n )
surfnm_c	SpiceZpr.h	/^   void              surfnm_c ( SpiceDouble         a,$/;"	signature:( SpiceDouble a, SpiceDouble b, SpiceDouble c, ConstSpiceDouble point[3], SpiceDouble normal[3] )
surfpt_c	SpiceZpr.h	/^   void              surfpt_c ( ConstSpiceDouble    positn[3],$/;"	signature:( ConstSpiceDouble positn[3], ConstSpiceDouble u[3], SpiceDouble a, SpiceDouble b, SpiceDouble c, SpiceDouble point[3], SpiceBoolean * found )
surfpv_c	SpiceZpr.h	/^   void              surfpv_c ( ConstSpiceDouble    stvrtx[6],$/;"	signature:( ConstSpiceDouble stvrtx[6], ConstSpiceDouble stdir [6], SpiceDouble a, SpiceDouble b, SpiceDouble c, SpiceDouble stx [6], SpiceBoolean * found )
swpool_c	SpiceZpr.h	/^   void              swpool_c ( ConstSpiceChar    * agent,$/;"	signature:( ConstSpiceChar * agent, SpiceInt nnames, SpiceInt lenvals, const void * names )
sxform_c	SpiceZpr.h	/^   void              sxform_c ( ConstSpiceChar    * from,$/;"	signature:( ConstSpiceChar * from, ConstSpiceChar * to, SpiceDouble et, SpiceDouble xform[6][6] )
szpool_c	SpiceZpr.h	/^   void              szpool_c ( ConstSpiceChar    * name,$/;"	signature:( ConstSpiceChar * name, SpiceInt * n, SpiceBoolean * found )
term_pl02	SpiceZpr.h	/^   void              term_pl02 ( SpiceInt              handle,$/;"	signature:( SpiceInt handle, ConstSpiceDLADescr * dladsc, ConstSpiceChar * trmtyp, ConstSpiceChar * source, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * fixref, ConstSpiceChar * abcorr, ConstSpiceChar * obsrvr, SpiceInt npoints, SpiceDouble * trgepc, SpiceDouble obspos [3], SpiceDouble trmpts [][3], SpiceInt plateIDs [] )
termpt_c	SpiceZpr.h	/^   void              termpt_c ( ConstSpiceChar    * method,$/;"	signature:( ConstSpiceChar * method, ConstSpiceChar * ilusrc, ConstSpiceChar * target, SpiceDouble et, ConstSpiceChar * fixref, ConstSpiceChar * abcorr, ConstSpiceChar * corloc, ConstSpiceChar * obsrvr, ConstSpiceDouble refvec[3], SpiceDouble rolstp, SpiceInt ncuts, SpiceDouble schstp, SpiceDouble soltol, SpiceInt maxn, SpiceInt npts [], SpiceDouble points[][3], SpiceDouble epochs[], SpiceDouble tangts[][3] )
timdef_c	SpiceZpr.h	/^   void              timdef_c ( ConstSpiceChar    * action,$/;"	signature:( ConstSpiceChar * action, ConstSpiceChar * item, SpiceInt lenout, SpiceChar * value )
timout_c	SpiceZpr.h	/^   void              timout_c ( SpiceDouble         et,$/;"	signature:( SpiceDouble et, ConstSpiceChar * pictur, SpiceInt lenout, SpiceChar * output )
tipbod_c	SpiceZpr.h	/^   void              tipbod_c ( ConstSpiceChar    * ref,$/;"	signature:( ConstSpiceChar * ref, SpiceInt body, SpiceDouble et, SpiceDouble tipm[3][3] )
tisbod_c	SpiceZpr.h	/^   void              tisbod_c ( ConstSpiceChar    * ref,$/;"	signature:( ConstSpiceChar * ref, SpiceInt body, SpiceDouble et, SpiceDouble tsipm[6][6] )
tkvrsn_c	SpiceZpr.h	/^   ConstSpiceChar  * tkvrsn_c ( ConstSpiceChar    * item );$/;"	signature:( ConstSpiceChar * item )
tparse_c	SpiceZpr.h	/^   void              tparse_c ( ConstSpiceChar    * string,$/;"	signature:( ConstSpiceChar * string, SpiceInt lenout, SpiceDouble * sp2000, SpiceChar * errmsg )
tpictr_c	SpiceZpr.h	/^   void              tpictr_c ( ConstSpiceChar    * sample,$/;"	signature:( ConstSpiceChar * sample, SpiceInt lenpictur, SpiceInt lenerror, SpiceChar * pictur, SpiceBoolean * ok, SpiceChar * error )
trace_c	SpiceZpr.h	/^   SpiceDouble       trace_c  ( ConstSpiceDouble    matrix[3][3] );$/;"	signature:( ConstSpiceDouble matrix[3][3] )
trcdep_c	SpiceZpr.h	/^   void              trcdep_c ( SpiceInt          * depth );$/;"	signature:( SpiceInt * depth )
trcnam_c	SpiceZpr.h	/^   void              trcnam_c ( SpiceInt            index,$/;"	signature:( SpiceInt index, SpiceInt namelen, SpiceChar * name )
trcoff_c	SpiceZpr.h	/^   void              trcoff_c ( void );$/;"	signature:( void )
tsetyr_c	SpiceZpr.h	/^   void              tsetyr_c ( SpiceInt            year );$/;"	signature:( SpiceInt year )
twopi_c	SpiceZpr.h	/^   SpiceDouble       twopi_c  ( void );$/;"	signature:( void )
twovec_c	SpiceZpr.h	/^   void              twovec_c ( ConstSpiceDouble    axdef  [3],$/;"	signature:( ConstSpiceDouble axdef [3], SpiceInt indexa, ConstSpiceDouble plndef [3], SpiceInt indexp, SpiceDouble mout [3][3] )
tyear_c	SpiceZpr.h	/^   SpiceDouble       tyear_c  ( void );$/;"	signature:( void )
ucase_c	SpiceZpr.h	/^   void              ucase_c  ( SpiceChar         * in,$/;"	signature:( SpiceChar * in, SpiceInt lenout, SpiceChar * out )
ucrss_c	SpiceZpr.h	/^   void              ucrss_c  ( ConstSpiceDouble    v1[3],$/;"	signature:( ConstSpiceDouble v1[3], ConstSpiceDouble v2[3], SpiceDouble vout[3] )
uddc_c	SpiceZpr.h	/^   void              uddc_c ( void       ( * udfunc ) ( SpiceDouble    x,$/;"	signature:( void ( * udfunc ) ( SpiceDouble x, SpiceDouble * value ), SpiceDouble x, SpiceDouble dx, SpiceBoolean * isdecr )
uddf_c	SpiceZpr.h	/^   void              uddf_c ( void       ( * udfunc ) ( SpiceDouble    x,$/;"	signature:( void ( * udfunc ) ( SpiceDouble x, SpiceDouble * value ), SpiceDouble x, SpiceDouble dx, SpiceDouble * deriv )
udf_c	SpiceZpr.h	/^   void              udf_c   ( SpiceDouble   x,$/;"	signature:( SpiceDouble x, SpiceDouble * value )
union_c	SpiceZpr.h	/^   void              union_c  ( SpiceCell          * a,$/;"	signature:( SpiceCell * a, SpiceCell * b, SpiceCell * c )
unitim_c	SpiceZpr.h	/^   SpiceDouble       unitim_c ( SpiceDouble         epoch,$/;"	signature:( SpiceDouble epoch, ConstSpiceChar * insys, ConstSpiceChar * outsys )
unload_c	SpiceZpr.h	/^   void              unload_c ( ConstSpiceChar   * file );$/;"	signature:( ConstSpiceChar * file )
unorm_c	SpiceZpr.h	/^   void              unorm_c  ( ConstSpiceDouble    v1[3],$/;"	signature:( ConstSpiceDouble v1[3], SpiceDouble vout[3], SpiceDouble * vmag )
unormg_c	SpiceZpr.h	/^   void              unormg_c ( ConstSpiceDouble  * v1,$/;"	signature:( ConstSpiceDouble * v1, SpiceInt ndim, SpiceDouble * vout, SpiceDouble * vmag )
utc2et_c	SpiceZpr.h	/^   void              utc2et_c ( ConstSpiceChar    * utcstr,$/;"	signature:( ConstSpiceChar * utcstr, SpiceDouble * et )
vadd_c	SpiceZpr.h	/^   void              vadd_c   ( ConstSpiceDouble    v1[3],$/;"	signature:( ConstSpiceDouble v1[3], ConstSpiceDouble v2[3], SpiceDouble vout[3] )
vaddg_c	SpiceZpr.h	/^   void              vaddg_c  ( ConstSpiceDouble  * v1,$/;"	signature:( ConstSpiceDouble * v1, ConstSpiceDouble * v2, SpiceInt ndim, SpiceDouble * vout )
valid_c	SpiceZpr.h	/^   void              valid_c  ( SpiceInt             size,$/;"	signature:( SpiceInt size, SpiceInt n, SpiceCell * a )
vcrss_c	SpiceZpr.h	/^   void              vcrss_c  ( ConstSpiceDouble    v1[3],$/;"	signature:( ConstSpiceDouble v1[3], ConstSpiceDouble v2[3], SpiceDouble vout[3] )
vdist_c	SpiceZpr.h	/^   SpiceDouble       vdist_c  ( ConstSpiceDouble    v1[3],$/;"	signature:( ConstSpiceDouble v1[3], ConstSpiceDouble v2[3] )
vdistg_c	SpiceZpr.h	/^   SpiceDouble       vdistg_c ( ConstSpiceDouble  * v1,$/;"	signature:( ConstSpiceDouble * v1, ConstSpiceDouble * v2, SpiceInt ndim )
vdot_c	SpiceZpr.h	/^   SpiceDouble       vdot_c   ( ConstSpiceDouble    v1[3],$/;"	signature:( ConstSpiceDouble v1[3], ConstSpiceDouble v2[3] )
vdotg_c	SpiceZpr.h	/^   SpiceDouble       vdotg_c  ( ConstSpiceDouble  * v1,$/;"	signature:( ConstSpiceDouble * v1, ConstSpiceDouble * v2, SpiceInt ndim )
vequ_c	SpiceZpr.h	/^   void              vequ_c   ( ConstSpiceDouble    vin[3],$/;"	signature:( ConstSpiceDouble vin[3], SpiceDouble vout[3] )
vequg_c	SpiceZpr.h	/^   void              vequg_c  ( ConstSpiceDouble  * vin,$/;"	signature:( ConstSpiceDouble * vin, SpiceInt ndim, SpiceDouble * vout )
vhat_c	SpiceZpr.h	/^   void              vhat_c   ( ConstSpiceDouble    v1  [3],$/;"	signature:( ConstSpiceDouble v1 [3], SpiceDouble vout[3] )
vhatg_c	SpiceZpr.h	/^   void              vhatg_c  ( ConstSpiceDouble  * v1,$/;"	signature:( ConstSpiceDouble * v1, SpiceInt ndim, SpiceDouble * vout )
vlcom3_c	SpiceZpr.h	/^   void              vlcom3_c ( SpiceDouble         a,$/;"	signature:( SpiceDouble a, ConstSpiceDouble v1[3], SpiceDouble b, ConstSpiceDouble v2[3], SpiceDouble c, ConstSpiceDouble v3[3], SpiceDouble sum[3] )
vlcom_c	SpiceZpr.h	/^   void              vlcom_c  ( SpiceDouble         a,$/;"	signature:( SpiceDouble a, ConstSpiceDouble v1[3], SpiceDouble b, ConstSpiceDouble v2[3], SpiceDouble sum[3] )
vlcomg_c	SpiceZpr.h	/^   void              vlcomg_c ( SpiceInt            n,$/;"	signature:( SpiceInt n, SpiceDouble a, ConstSpiceDouble * v1, SpiceDouble b, ConstSpiceDouble * v2, SpiceDouble * sum )
vminug_c	SpiceZpr.h	/^   void              vminug_c ( ConstSpiceDouble  * vin,$/;"	signature:( ConstSpiceDouble * vin, SpiceInt ndim, SpiceDouble * vout )
vminus_c	SpiceZpr.h	/^   void              vminus_c ( ConstSpiceDouble    v1[3],$/;"	signature:( ConstSpiceDouble v1[3], SpiceDouble vout[3] )
vnorm_c	SpiceZpr.h	/^   SpiceDouble       vnorm_c  ( ConstSpiceDouble    v1[3] );$/;"	signature:( ConstSpiceDouble v1[3] )
vnormg_c	SpiceZpr.h	/^   SpiceDouble       vnormg_c ( ConstSpiceDouble  * v1,$/;"	signature:( ConstSpiceDouble * v1, SpiceInt ndim )
vpack_c	SpiceZpr.h	/^   void              vpack_c  ( SpiceDouble         x,$/;"	signature:( SpiceDouble x, SpiceDouble y, SpiceDouble z, SpiceDouble v[3] )
vperp_c	SpiceZpr.h	/^   void              vperp_c  ( ConstSpiceDouble    a[3],$/;"	signature:( ConstSpiceDouble a[3], ConstSpiceDouble b[3], SpiceDouble p[3] )
vprjp_c	SpiceZpr.h	/^   void              vprjp_c  ( ConstSpiceDouble    vin   [3],$/;"	signature:( ConstSpiceDouble vin [3], ConstSpicePlane * plane, SpiceDouble vout [3] )
vprjpi_c	SpiceZpr.h	/^   void              vprjpi_c ( ConstSpiceDouble    vin    [3],$/;"	signature:( ConstSpiceDouble vin [3], ConstSpicePlane * projpl, ConstSpicePlane * invpl, SpiceDouble vout [3], SpiceBoolean * found )
vproj_c	SpiceZpr.h	/^   void              vproj_c  ( ConstSpiceDouble    a[3],$/;"	signature:( ConstSpiceDouble a[3], ConstSpiceDouble b[3], SpiceDouble p[3] )
vrel_c	SpiceZpr.h	/^   SpiceDouble       vrel_c   ( ConstSpiceDouble    v1[3],$/;"	signature:( ConstSpiceDouble v1[3], ConstSpiceDouble v2[3] )
vrelg_c	SpiceZpr.h	/^   SpiceDouble       vrelg_c  ( ConstSpiceDouble  * v1,$/;"	signature:( ConstSpiceDouble * v1, ConstSpiceDouble * v2, SpiceInt ndim )
vrotv_c	SpiceZpr.h	/^   void              vrotv_c  ( ConstSpiceDouble    v[3],$/;"	signature:( ConstSpiceDouble v[3], ConstSpiceDouble axis[3], SpiceDouble theta, SpiceDouble r[3] )
vscl_c	SpiceZpr.h	/^   void              vscl_c   ( SpiceDouble         s,$/;"	signature:( SpiceDouble s, ConstSpiceDouble v1[3], SpiceDouble vout[3] )
vsclg_c	SpiceZpr.h	/^   void              vsclg_c  ( SpiceDouble         s,$/;"	signature:( SpiceDouble s, ConstSpiceDouble * v1, SpiceInt ndim, SpiceDouble * vout )
vsep_c	SpiceZpr.h	/^   SpiceDouble       vsep_c   ( ConstSpiceDouble    v1[3],$/;"	signature:( ConstSpiceDouble v1[3], ConstSpiceDouble v2[3] )
vsepg_c	SpiceZpr.h	/^   SpiceDouble       vsepg_c  ( ConstSpiceDouble  * v1,$/;"	signature:( ConstSpiceDouble * v1, ConstSpiceDouble * v2, SpiceInt ndim )
vsub_c	SpiceZpr.h	/^   void              vsub_c   ( ConstSpiceDouble    v1[3],$/;"	signature:( ConstSpiceDouble v1[3], ConstSpiceDouble v2[3], SpiceDouble vout[3] )
vsubg_c	SpiceZpr.h	/^   void              vsubg_c  ( ConstSpiceDouble  * v1,$/;"	signature:( ConstSpiceDouble * v1, ConstSpiceDouble * v2, SpiceInt ndim, SpiceDouble * vout )
vtmv_c	SpiceZpr.h	/^   SpiceDouble       vtmv_c   ( ConstSpiceDouble    v1     [3],$/;"	signature:( ConstSpiceDouble v1 [3], ConstSpiceDouble matrix [3][3], ConstSpiceDouble v2 [3] )
vtmvg_c	SpiceZpr.h	/^   SpiceDouble       vtmvg_c  ( const void        * v1,$/;"	signature:( const void * v1, const void * matrix, const void * v2, SpiceInt nrow, SpiceInt ncol )
vupack_c	SpiceZpr.h	/^   void              vupack_c ( ConstSpiceDouble    v[3],$/;"	signature:( ConstSpiceDouble v[3], SpiceDouble * x, SpiceDouble * y, SpiceDouble * z )
vzero_c	SpiceZpr.h	/^   SpiceBoolean      vzero_c  ( ConstSpiceDouble     v[3] );$/;"	signature:( ConstSpiceDouble v[3] )
vzerog_c	SpiceZpr.h	/^   SpiceBoolean      vzerog_c ( ConstSpiceDouble  * v,$/;"	signature:( ConstSpiceDouble * v, SpiceInt ndim )
wncard_c	SpiceZpr.h	/^   SpiceInt          wncard_c ( SpiceCell          * window );$/;"	signature:( SpiceCell * window )
wncomd_c	SpiceZpr.h	/^   void              wncomd_c ( SpiceDouble          left,$/;"	signature:( SpiceDouble left, SpiceDouble right, SpiceCell * window, SpiceCell * result )
wncond_c	SpiceZpr.h	/^   void              wncond_c ( SpiceDouble          left,$/;"	signature:( SpiceDouble left, SpiceDouble right, SpiceCell * window )
wndifd_c	SpiceZpr.h	/^   void              wndifd_c ( SpiceCell          * a,$/;"	signature:( SpiceCell * a, SpiceCell * b, SpiceCell * c )
wnelmd_c	SpiceZpr.h	/^   SpiceBoolean      wnelmd_c ( SpiceDouble          point,$/;"	signature:( SpiceDouble point, SpiceCell * window )
wnexpd_c	SpiceZpr.h	/^   void              wnexpd_c ( SpiceDouble          left,$/;"	signature:( SpiceDouble left, SpiceDouble right, SpiceCell * window )
wnextd_c	SpiceZpr.h	/^   void              wnextd_c ( SpiceChar            side,$/;"	signature:( SpiceChar side, SpiceCell * window )
wnfetd_c	SpiceZpr.h	/^   void              wnfetd_c ( SpiceCell          * window,$/;"	signature:( SpiceCell * window, SpiceInt n, SpiceDouble * left, SpiceDouble * right )
wnfild_c	SpiceZpr.h	/^   void              wnfild_c ( SpiceDouble          sml,$/;"	signature:( SpiceDouble sml, SpiceCell * window )
wnfltd_c	SpiceZpr.h	/^   void              wnfltd_c ( SpiceDouble          sml,$/;"	signature:( SpiceDouble sml, SpiceCell * window )
wnincd_c	SpiceZpr.h	/^   SpiceBoolean      wnincd_c ( SpiceDouble          left,$/;"	signature:( SpiceDouble left, SpiceDouble right, SpiceCell * window )
wninsd_c	SpiceZpr.h	/^   void              wninsd_c ( SpiceDouble          left,$/;"	signature:( SpiceDouble left, SpiceDouble right, SpiceCell * window )
wnintd_c	SpiceZpr.h	/^   void              wnintd_c ( SpiceCell          * a,$/;"	signature:( SpiceCell * a, SpiceCell * b, SpiceCell * c )
wnreld_c	SpiceZpr.h	/^   SpiceBoolean      wnreld_c ( SpiceCell          * a,$/;"	signature:( SpiceCell * a, ConstSpiceChar * op, SpiceCell * b )
wnsumd_c	SpiceZpr.h	/^   void              wnsumd_c ( SpiceCell          * window,$/;"	signature:( SpiceCell * window, SpiceDouble * meas, SpiceDouble * avg, SpiceDouble * stddev, SpiceInt * shortest, SpiceInt * longest )
wnunid_c	SpiceZpr.h	/^   void              wnunid_c ( SpiceCell          * a,$/;"	signature:( SpiceCell * a, SpiceCell * b, SpiceCell * c )
wnvald_c	SpiceZpr.h	/^   void              wnvald_c ( SpiceInt             size,$/;"	signature:( SpiceInt size, SpiceInt n, SpiceCell * window )
xf2eul_c	SpiceZpr.h	/^   void              xf2eul_c ( ConstSpiceDouble     xform  [6][6],$/;"	signature:( ConstSpiceDouble xform [6][6], SpiceInt axisa, SpiceInt axisb, SpiceInt axisc, SpiceDouble eulang [6], SpiceBoolean * unique )
xf2rav_c	SpiceZpr.h	/^   void              xf2rav_c ( ConstSpiceDouble     xform [6][6],$/;"	signature:( ConstSpiceDouble xform [6][6], SpiceDouble rot [3][3], SpiceDouble av [3] )
xfmsta_c	SpiceZpr.h	/^   void              xfmsta_c ( ConstSpiceDouble     input_state  [6],$/;"	signature:( ConstSpiceDouble input_state [6], ConstSpiceChar * input_coord_sys, ConstSpiceChar * output_coord_sys, ConstSpiceChar * body, SpiceDouble output_state [6] )
xpose6_c	SpiceZpr.h	/^   void              xpose6_c ( ConstSpiceDouble    m1  [6][6],$/;"	signature:( ConstSpiceDouble m1 [6][6], SpiceDouble mout[6][6] )
xpose_c	SpiceZpr.h	/^   void              xpose_c  ( ConstSpiceDouble    m1  [3][3],$/;"	signature:( ConstSpiceDouble m1 [3][3], SpiceDouble mout[3][3] )
xposeg_c	SpiceZpr.h	/^   void              xposeg_c ( const void        * matrix,$/;"	signature:( const void * matrix, SpiceInt nrow, SpiceInt ncol, void * xposem )
zzgetcml_c	SpiceZpr.h	/^   void              zzgetcml_c( SpiceInt          * argc,$/;"	signature:( SpiceInt * argc, SpiceChar *** argv, SpiceBoolean init )
zzgfgeth_c	SpiceZpr.h	/^   SpiceBoolean      zzgfgeth_c ( void );$/;"	signature:( void )
zzgfsavh_c	SpiceZpr.h	/^   void              zzgfsavh_c( SpiceBoolean        status );$/;"	signature:( SpiceBoolean status )
zzsynccl_c	SpiceZpr.h	/^   void              zzsynccl_c( SpiceTransDir       xdir,$/;"	signature:( SpiceTransDir xdir, SpiceCell * cell )
